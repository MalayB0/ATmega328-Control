
1113.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  000001ac  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000044  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000168  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000100  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001b5  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e8  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  88:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <LED_BLINK>:
#include<avr/interrupt.h>
unsigned char TovVal = 0;

void LED_BLINK(void)
{
   PORTD = 0X00;
  90:	1b b8       	out	0x0b, r1	; 11
  92:	88 eb       	ldi	r24, 0xB8	; 184
  94:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  96:	20 e9       	ldi	r18, 0x90	; 144
  98:	31 e0       	ldi	r19, 0x01	; 1
  9a:	f9 01       	movw	r30, r18
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LED_BLINK+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a2:	d9 f7       	brne	.-10     	; 0x9a <LED_BLINK+0xa>
   _delay_ms(300);
   PORTD = 0XFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8b b9       	out	0x0b, r24	; 11
}
  a8:	08 95       	ret

000000aa <__vector_16>:

ISR(TIMER0_OVF_vect)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	4f 93       	push	r20
  ba:	5f 93       	push	r21
  bc:	6f 93       	push	r22
  be:	7f 93       	push	r23
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	af 93       	push	r26
  c6:	bf 93       	push	r27
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
   TCNT0 = 0XFF - 0X4E; //To make 5ms
  cc:	81 eb       	ldi	r24, 0xB1	; 177
  ce:	86 bd       	out	0x26, r24	; 38
   TovVal++;
  d0:	80 91 00 01 	lds	r24, 0x0100
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 00 01 	sts	0x0100, r24

   if(TovVal == 200)
  da:	88 3c       	cpi	r24, 0xC8	; 200
  dc:	21 f4       	brne	.+8      	; 0xe6 <__vector_16+0x3c>
   {
      LED_BLINK();
  de:	0e 94 48 00 	call	0x90	; 0x90 <LED_BLINK>
      TovVal = 0;
  e2:	10 92 00 01 	sts	0x0100, r1
   }

   sei();
  e6:	78 94       	sei
}
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	bf 91       	pop	r27
  ee:	af 91       	pop	r26
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	7f 91       	pop	r23
  f6:	6f 91       	pop	r22
  f8:	5f 91       	pop	r21
  fa:	4f 91       	pop	r20
  fc:	3f 91       	pop	r19
  fe:	2f 91       	pop	r18
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <main>:

int main()
{
   unsigned char in;
   cli();
 10a:	f8 94       	cli
   DDRD = 0XFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8a b9       	out	0x0a, r24	; 10
   PORTD = 0XFF;
 110:	8b b9       	out	0x0b, r24	; 11

   TCCR0A = 0X00;
 112:	14 bc       	out	0x24, r1	; 36
   //NORMAL MODE

   TCCR0B |= (1<<CS02);
 114:	85 b5       	in	r24, 0x25	; 37
 116:	84 60       	ori	r24, 0x04	; 4
 118:	85 bd       	out	0x25, r24	; 37
   //1024 prescaler
   TCCR0B |= (1 << CS00);
 11a:	85 b5       	in	r24, 0x25	; 37
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	85 bd       	out	0x25, r24	; 37

   TCNT0 = 0XFF - 0X4E;
 120:	81 eb       	ldi	r24, 0xB1	; 177
 122:	86 bd       	out	0x26, r24	; 38
   //To generate OV at every 5ms

   TIMSK0 |= 1 << TOIE0;
 124:	80 91 6e 00 	lds	r24, 0x006E
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 93 6e 00 	sts	0x006E, r24
   //Timer0 overflow interrupt enable
   TIFR0 |= 1 << TOV0;
 12e:	a8 9a       	sbi	0x15, 0	; 21

   sei();
 130:	78 94       	sei
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x28>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
