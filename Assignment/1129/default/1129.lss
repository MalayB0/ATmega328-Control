
1129.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000004b6  0000054a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800114  00800114  0000055e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000058  00000000  00000000  0000057e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000141  00000000  00000000  000005d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000b8  00000000  00000000  00000717  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000153  00000000  00000000  000007cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000be  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 39       	cpi	r26, 0x9A	; 154
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  9e:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <tx_char>:
#define	MAX_TXBUF_SIZE	128
unsigned char tx_buf[MAX_TXBUF_SIZE];
int buf_len = 0;

void tx_char(unsigned char txChar)
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	0f 92       	push	r0
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	89 83       	std	Y+1, r24	; 0x01
      while(!(UCSR0A & (1<<UDRE0)));
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 2f       	mov	r24, r24
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	80 72       	andi	r24, 0x20	; 32
  be:	90 70       	andi	r25, 0x00	; 0
  c0:	00 97       	sbiw	r24, 0x00	; 0
  c2:	b9 f3       	breq	.-18     	; 0xb2 <tx_char+0xc>
	UDR0 = txChar;
  c4:	e6 ec       	ldi	r30, 0xC6	; 198
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	80 83       	st	Z, r24
}
  cc:	0f 90       	pop	r0
  ce:	cf 91       	pop	r28
  d0:	df 91       	pop	r29
  d2:	08 95       	ret

000000d4 <tx_str>:

void tx_str(unsigned char *txStr, int len)
{
  d4:	df 93       	push	r29
  d6:	cf 93       	push	r28
  d8:	00 d0       	rcall	.+0      	; 0xda <tx_str+0x6>
  da:	00 d0       	rcall	.+0      	; 0xdc <tx_str+0x8>
  dc:	00 d0       	rcall	.+0      	; 0xde <tx_str+0xa>
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	9c 83       	std	Y+4, r25	; 0x04
  e4:	8b 83       	std	Y+3, r24	; 0x03
  e6:	7e 83       	std	Y+6, r23	; 0x06
  e8:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	for(i = 0;i< len; i++){
  ea:	1a 82       	std	Y+2, r1	; 0x02
  ec:	19 82       	std	Y+1, r1	; 0x01
  ee:	0f c0       	rjmp	.+30     	; 0x10e <tx_str+0x3a>
		tx_char(txStr[i]);
  f0:	29 81       	ldd	r18, Y+1	; 0x01
  f2:	3a 81       	ldd	r19, Y+2	; 0x02
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	9c 81       	ldd	r25, Y+4	; 0x04
  f8:	fc 01       	movw	r30, r24
  fa:	e2 0f       	add	r30, r18
  fc:	f3 1f       	adc	r31, r19
  fe:	80 81       	ld	r24, Z
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_char>
}

void tx_str(unsigned char *txStr, int len)
{
	int i;
	for(i = 0;i< len; i++){
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	9a 81       	ldd	r25, Y+2	; 0x02
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	89 83       	std	Y+1, r24	; 0x01
 10e:	29 81       	ldd	r18, Y+1	; 0x01
 110:	3a 81       	ldd	r19, Y+2	; 0x02
 112:	8d 81       	ldd	r24, Y+5	; 0x05
 114:	9e 81       	ldd	r25, Y+6	; 0x06
 116:	28 17       	cp	r18, r24
 118:	39 07       	cpc	r19, r25
 11a:	54 f3       	brlt	.-44     	; 0xf0 <tx_str+0x1c>
		tx_char(txStr[i]);
	}
}
 11c:	26 96       	adiw	r28, 0x06	; 6
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
 128:	cf 91       	pop	r28
 12a:	df 91       	pop	r29
 12c:	08 95       	ret

0000012e <__vector_1>:
ISR (INT0_vect)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
 150:	df 93       	push	r29
 152:	cf 93       	push	r28
 154:	00 d0       	rcall	.+0      	; 0x156 <__vector_1+0x28>
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
	unsigned char *tmp;

	tmp = malloc(30);
 15a:	8e e1       	ldi	r24, 0x1E	; 30
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 35 01 	call	0x26a	; 0x26a <malloc>
 162:	9a 83       	std	Y+2, r25	; 0x02
 164:	89 83       	std	Y+1, r24	; 0x01
	memset(tmp,'\0',30);
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	4e e1       	ldi	r20, 0x1E	; 30
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	0e 94 3a 02 	call	0x474	; 0x474 <memset>
	tmp = "INT1 PUSHED\n";
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	9a 83       	std	Y+2, r25	; 0x02
 17c:	89 83       	std	Y+1, r24	; 0x01
	buf_len = strlen(tmp);
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	9a 81       	ldd	r25, Y+2	; 0x02
 182:	0e 94 41 02 	call	0x482	; 0x482 <strlen>
 186:	90 93 15 01 	sts	0x0115, r25
 18a:	80 93 14 01 	sts	0x0114, r24
	strncpy(tx_buf,tmp,buf_len);
 18e:	80 91 14 01 	lds	r24, 0x0114
 192:	90 91 15 01 	lds	r25, 0x0115
 196:	ac 01       	movw	r20, r24
 198:	86 e1       	ldi	r24, 0x16	; 22
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	29 81       	ldd	r18, Y+1	; 0x01
 19e:	3a 81       	ldd	r19, Y+2	; 0x02
 1a0:	b9 01       	movw	r22, r18
 1a2:	0e 94 4a 02 	call	0x494	; 0x494 <strncpy>
	EIFR |= 0x01; 
 1a6:	ac e3       	ldi	r26, 0x3C	; 60
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	ec e3       	ldi	r30, 0x3C	; 60
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	8c 93       	st	X, r24
	sei();
 1b4:	78 94       	sei
}
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <main>:


int main()
{
 1e0:	df 93       	push	r29
 1e2:	cf 93       	push	r28
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
	cli();
 1e8:	f8 94       	cli
	DDRD = 0XF0;
 1ea:	ea e2       	ldi	r30, 0x2A	; 42
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 ef       	ldi	r24, 0xF0	; 240
 1f0:	80 83       	st	Z, r24
	EICRA = 0xAA; 	
 1f2:	e9 e6       	ldi	r30, 0x69	; 105
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	8a ea       	ldi	r24, 0xAA	; 170
 1f8:	80 83       	st	Z, r24
	EIMSK = 0x0F; 	
 1fa:	ed e3       	ldi	r30, 0x3D	; 61
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	8f e0       	ldi	r24, 0x0F	; 15
 200:	80 83       	st	Z, r24
	EIFR |= 0x0F;   
 202:	ac e3       	ldi	r26, 0x3C	; 60
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	ec e3       	ldi	r30, 0x3C	; 60
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	8f 60       	ori	r24, 0x0F	; 15
 20e:	8c 93       	st	X, r24


	UBRR0H = (unsigned char) (BAUD_9600 >>8) ;
 210:	e5 ec       	ldi	r30, 0xC5	; 197
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	10 82       	st	Z, r1
	UBRR0L = (unsigned char) BAUD_9600;
 216:	e4 ec       	ldi	r30, 0xC4	; 196
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	87 e6       	ldi	r24, 0x67	; 103
 21c:	80 83       	st	Z, r24
	UCSR0B = (1<< TXEN0)|  (1<< RXEN0);	
 21e:	e1 ec       	ldi	r30, 0xC1	; 193
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	88 e1       	ldi	r24, 0x18	; 24
 224:	80 83       	st	Z, r24
	UCSR0C = (1<< UCSZ01) | (1<< UCSZ00);
 226:	e2 ec       	ldi	r30, 0xC2	; 194
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	80 83       	st	Z, r24
	sei();
 22e:	78 94       	sei

	while(1){
    	if(buf_len > 0){
 230:	80 91 14 01 	lds	r24, 0x0114
 234:	90 91 15 01 	lds	r25, 0x0115
 238:	18 16       	cp	r1, r24
 23a:	19 06       	cpc	r1, r25
 23c:	cc f7       	brge	.-14     	; 0x230 <main+0x50>
            tx_str(tx_buf,buf_len);
 23e:	20 91 14 01 	lds	r18, 0x0114
 242:	30 91 15 01 	lds	r19, 0x0115
 246:	86 e1       	ldi	r24, 0x16	; 22
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	b9 01       	movw	r22, r18
 24c:	0e 94 6a 00 	call	0xd4	; 0xd4 <tx_str>
			memset(tx_buf,'\0',MAX_TXBUF_SIZE);
 250:	86 e1       	ldi	r24, 0x16	; 22
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	40 e8       	ldi	r20, 0x80	; 128
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	0e 94 3a 02 	call	0x474	; 0x474 <memset>
	        buf_len = 0;
 260:	10 92 15 01 	sts	0x0115, r1
 264:	10 92 14 01 	sts	0x0114, r1
 268:	e3 cf       	rjmp	.-58     	; 0x230 <main+0x50>

0000026a <malloc>:
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	bc 01       	movw	r22, r24
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	91 05       	cpc	r25, r1
 274:	10 f4       	brcc	.+4      	; 0x27a <malloc+0x10>
 276:	62 e0       	ldi	r22, 0x02	; 2
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	a0 91 98 01 	lds	r26, 0x0198
 27e:	b0 91 99 01 	lds	r27, 0x0199
 282:	ed 01       	movw	r28, r26
 284:	e0 e0       	ldi	r30, 0x00	; 0
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	21 c0       	rjmp	.+66     	; 0x2d0 <malloc+0x66>
 28e:	88 81       	ld	r24, Y
 290:	99 81       	ldd	r25, Y+1	; 0x01
 292:	86 17       	cp	r24, r22
 294:	97 07       	cpc	r25, r23
 296:	69 f4       	brne	.+26     	; 0x2b2 <malloc+0x48>
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	9b 81       	ldd	r25, Y+3	; 0x03
 29c:	30 97       	sbiw	r30, 0x00	; 0
 29e:	19 f0       	breq	.+6      	; 0x2a6 <malloc+0x3c>
 2a0:	93 83       	std	Z+3, r25	; 0x03
 2a2:	82 83       	std	Z+2, r24	; 0x02
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <malloc+0x44>
 2a6:	90 93 99 01 	sts	0x0199, r25
 2aa:	80 93 98 01 	sts	0x0198, r24
 2ae:	fe 01       	movw	r30, r28
 2b0:	34 c0       	rjmp	.+104    	; 0x31a <malloc+0xb0>
 2b2:	68 17       	cp	r22, r24
 2b4:	79 07       	cpc	r23, r25
 2b6:	38 f4       	brcc	.+14     	; 0x2c6 <malloc+0x5c>
 2b8:	41 15       	cp	r20, r1
 2ba:	51 05       	cpc	r21, r1
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <malloc+0x5a>
 2be:	84 17       	cp	r24, r20
 2c0:	95 07       	cpc	r25, r21
 2c2:	08 f4       	brcc	.+2      	; 0x2c6 <malloc+0x5c>
 2c4:	ac 01       	movw	r20, r24
 2c6:	fe 01       	movw	r30, r28
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	9b 81       	ldd	r25, Y+3	; 0x03
 2cc:	9c 01       	movw	r18, r24
 2ce:	e9 01       	movw	r28, r18
 2d0:	20 97       	sbiw	r28, 0x00	; 0
 2d2:	e9 f6       	brne	.-70     	; 0x28e <malloc+0x24>
 2d4:	41 15       	cp	r20, r1
 2d6:	51 05       	cpc	r21, r1
 2d8:	a9 f1       	breq	.+106    	; 0x344 <malloc+0xda>
 2da:	ca 01       	movw	r24, r20
 2dc:	86 1b       	sub	r24, r22
 2de:	97 0b       	sbc	r25, r23
 2e0:	04 97       	sbiw	r24, 0x04	; 4
 2e2:	08 f4       	brcc	.+2      	; 0x2e6 <malloc+0x7c>
 2e4:	ba 01       	movw	r22, r20
 2e6:	e0 e0       	ldi	r30, 0x00	; 0
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	2a c0       	rjmp	.+84     	; 0x340 <malloc+0xd6>
 2ec:	8d 91       	ld	r24, X+
 2ee:	9c 91       	ld	r25, X
 2f0:	11 97       	sbiw	r26, 0x01	; 1
 2f2:	84 17       	cp	r24, r20
 2f4:	95 07       	cpc	r25, r21
 2f6:	f9 f4       	brne	.+62     	; 0x336 <malloc+0xcc>
 2f8:	64 17       	cp	r22, r20
 2fa:	75 07       	cpc	r23, r21
 2fc:	81 f4       	brne	.+32     	; 0x31e <malloc+0xb4>
 2fe:	12 96       	adiw	r26, 0x02	; 2
 300:	8d 91       	ld	r24, X+
 302:	9c 91       	ld	r25, X
 304:	13 97       	sbiw	r26, 0x03	; 3
 306:	30 97       	sbiw	r30, 0x00	; 0
 308:	19 f0       	breq	.+6      	; 0x310 <malloc+0xa6>
 30a:	93 83       	std	Z+3, r25	; 0x03
 30c:	82 83       	std	Z+2, r24	; 0x02
 30e:	04 c0       	rjmp	.+8      	; 0x318 <malloc+0xae>
 310:	90 93 99 01 	sts	0x0199, r25
 314:	80 93 98 01 	sts	0x0198, r24
 318:	fd 01       	movw	r30, r26
 31a:	32 96       	adiw	r30, 0x02	; 2
 31c:	4f c0       	rjmp	.+158    	; 0x3bc <malloc+0x152>
 31e:	ca 01       	movw	r24, r20
 320:	86 1b       	sub	r24, r22
 322:	97 0b       	sbc	r25, r23
 324:	fd 01       	movw	r30, r26
 326:	e8 0f       	add	r30, r24
 328:	f9 1f       	adc	r31, r25
 32a:	61 93       	st	Z+, r22
 32c:	71 93       	st	Z+, r23
 32e:	02 97       	sbiw	r24, 0x02	; 2
 330:	8d 93       	st	X+, r24
 332:	9c 93       	st	X, r25
 334:	43 c0       	rjmp	.+134    	; 0x3bc <malloc+0x152>
 336:	fd 01       	movw	r30, r26
 338:	82 81       	ldd	r24, Z+2	; 0x02
 33a:	93 81       	ldd	r25, Z+3	; 0x03
 33c:	9c 01       	movw	r18, r24
 33e:	d9 01       	movw	r26, r18
 340:	10 97       	sbiw	r26, 0x00	; 0
 342:	a1 f6       	brne	.-88     	; 0x2ec <malloc+0x82>
 344:	80 91 96 01 	lds	r24, 0x0196
 348:	90 91 97 01 	lds	r25, 0x0197
 34c:	89 2b       	or	r24, r25
 34e:	41 f4       	brne	.+16     	; 0x360 <malloc+0xf6>
 350:	80 91 0f 01 	lds	r24, 0x010F
 354:	90 91 10 01 	lds	r25, 0x0110
 358:	90 93 97 01 	sts	0x0197, r25
 35c:	80 93 96 01 	sts	0x0196, r24
 360:	40 91 11 01 	lds	r20, 0x0111
 364:	50 91 12 01 	lds	r21, 0x0112
 368:	41 15       	cp	r20, r1
 36a:	51 05       	cpc	r21, r1
 36c:	41 f4       	brne	.+16     	; 0x37e <malloc+0x114>
 36e:	4d b7       	in	r20, 0x3d	; 61
 370:	5e b7       	in	r21, 0x3e	; 62
 372:	80 91 0d 01 	lds	r24, 0x010D
 376:	90 91 0e 01 	lds	r25, 0x010E
 37a:	48 1b       	sub	r20, r24
 37c:	59 0b       	sbc	r21, r25
 37e:	20 91 96 01 	lds	r18, 0x0196
 382:	30 91 97 01 	lds	r19, 0x0197
 386:	24 17       	cp	r18, r20
 388:	35 07       	cpc	r19, r21
 38a:	b0 f4       	brcc	.+44     	; 0x3b8 <malloc+0x14e>
 38c:	ca 01       	movw	r24, r20
 38e:	82 1b       	sub	r24, r18
 390:	93 0b       	sbc	r25, r19
 392:	86 17       	cp	r24, r22
 394:	97 07       	cpc	r25, r23
 396:	80 f0       	brcs	.+32     	; 0x3b8 <malloc+0x14e>
 398:	ab 01       	movw	r20, r22
 39a:	4e 5f       	subi	r20, 0xFE	; 254
 39c:	5f 4f       	sbci	r21, 0xFF	; 255
 39e:	84 17       	cp	r24, r20
 3a0:	95 07       	cpc	r25, r21
 3a2:	50 f0       	brcs	.+20     	; 0x3b8 <malloc+0x14e>
 3a4:	42 0f       	add	r20, r18
 3a6:	53 1f       	adc	r21, r19
 3a8:	50 93 97 01 	sts	0x0197, r21
 3ac:	40 93 96 01 	sts	0x0196, r20
 3b0:	f9 01       	movw	r30, r18
 3b2:	61 93       	st	Z+, r22
 3b4:	71 93       	st	Z+, r23
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <malloc+0x152>
 3b8:	e0 e0       	ldi	r30, 0x00	; 0
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	cf 01       	movw	r24, r30
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <free>:
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	09 f4       	brne	.+2      	; 0x3ce <free+0xa>
 3cc:	50 c0       	rjmp	.+160    	; 0x46e <free+0xaa>
 3ce:	ec 01       	movw	r28, r24
 3d0:	22 97       	sbiw	r28, 0x02	; 2
 3d2:	1b 82       	std	Y+3, r1	; 0x03
 3d4:	1a 82       	std	Y+2, r1	; 0x02
 3d6:	a0 91 98 01 	lds	r26, 0x0198
 3da:	b0 91 99 01 	lds	r27, 0x0199
 3de:	10 97       	sbiw	r26, 0x00	; 0
 3e0:	09 f1       	breq	.+66     	; 0x424 <free+0x60>
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	ac 17       	cp	r26, r28
 3e8:	bd 07       	cpc	r27, r29
 3ea:	08 f1       	brcs	.+66     	; 0x42e <free+0x6a>
 3ec:	bb 83       	std	Y+3, r27	; 0x03
 3ee:	aa 83       	std	Y+2, r26	; 0x02
 3f0:	fe 01       	movw	r30, r28
 3f2:	21 91       	ld	r18, Z+
 3f4:	31 91       	ld	r19, Z+
 3f6:	e2 0f       	add	r30, r18
 3f8:	f3 1f       	adc	r31, r19
 3fa:	ae 17       	cp	r26, r30
 3fc:	bf 07       	cpc	r27, r31
 3fe:	79 f4       	brne	.+30     	; 0x41e <free+0x5a>
 400:	8d 91       	ld	r24, X+
 402:	9c 91       	ld	r25, X
 404:	11 97       	sbiw	r26, 0x01	; 1
 406:	28 0f       	add	r18, r24
 408:	39 1f       	adc	r19, r25
 40a:	2e 5f       	subi	r18, 0xFE	; 254
 40c:	3f 4f       	sbci	r19, 0xFF	; 255
 40e:	39 83       	std	Y+1, r19	; 0x01
 410:	28 83       	st	Y, r18
 412:	12 96       	adiw	r26, 0x02	; 2
 414:	8d 91       	ld	r24, X+
 416:	9c 91       	ld	r25, X
 418:	13 97       	sbiw	r26, 0x03	; 3
 41a:	9b 83       	std	Y+3, r25	; 0x03
 41c:	8a 83       	std	Y+2, r24	; 0x02
 41e:	41 15       	cp	r20, r1
 420:	51 05       	cpc	r21, r1
 422:	71 f4       	brne	.+28     	; 0x440 <free+0x7c>
 424:	d0 93 99 01 	sts	0x0199, r29
 428:	c0 93 98 01 	sts	0x0198, r28
 42c:	20 c0       	rjmp	.+64     	; 0x46e <free+0xaa>
 42e:	12 96       	adiw	r26, 0x02	; 2
 430:	8d 91       	ld	r24, X+
 432:	9c 91       	ld	r25, X
 434:	13 97       	sbiw	r26, 0x03	; 3
 436:	ad 01       	movw	r20, r26
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	11 f0       	breq	.+4      	; 0x440 <free+0x7c>
 43c:	dc 01       	movw	r26, r24
 43e:	d3 cf       	rjmp	.-90     	; 0x3e6 <free+0x22>
 440:	fa 01       	movw	r30, r20
 442:	d3 83       	std	Z+3, r29	; 0x03
 444:	c2 83       	std	Z+2, r28	; 0x02
 446:	21 91       	ld	r18, Z+
 448:	31 91       	ld	r19, Z+
 44a:	e2 0f       	add	r30, r18
 44c:	f3 1f       	adc	r31, r19
 44e:	ce 17       	cp	r28, r30
 450:	df 07       	cpc	r29, r31
 452:	69 f4       	brne	.+26     	; 0x46e <free+0xaa>
 454:	88 81       	ld	r24, Y
 456:	99 81       	ldd	r25, Y+1	; 0x01
 458:	28 0f       	add	r18, r24
 45a:	39 1f       	adc	r19, r25
 45c:	2e 5f       	subi	r18, 0xFE	; 254
 45e:	3f 4f       	sbci	r19, 0xFF	; 255
 460:	fa 01       	movw	r30, r20
 462:	31 83       	std	Z+1, r19	; 0x01
 464:	20 83       	st	Z, r18
 466:	8a 81       	ldd	r24, Y+2	; 0x02
 468:	9b 81       	ldd	r25, Y+3	; 0x03
 46a:	93 83       	std	Z+3, r25	; 0x03
 46c:	82 83       	std	Z+2, r24	; 0x02
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <memset>:
 474:	dc 01       	movw	r26, r24
 476:	01 c0       	rjmp	.+2      	; 0x47a <memset+0x6>
 478:	6d 93       	st	X+, r22
 47a:	41 50       	subi	r20, 0x01	; 1
 47c:	50 40       	sbci	r21, 0x00	; 0
 47e:	e0 f7       	brcc	.-8      	; 0x478 <memset+0x4>
 480:	08 95       	ret

00000482 <strlen>:
 482:	fc 01       	movw	r30, r24
 484:	01 90       	ld	r0, Z+
 486:	00 20       	and	r0, r0
 488:	e9 f7       	brne	.-6      	; 0x484 <strlen+0x2>
 48a:	80 95       	com	r24
 48c:	90 95       	com	r25
 48e:	8e 0f       	add	r24, r30
 490:	9f 1f       	adc	r25, r31
 492:	08 95       	ret

00000494 <strncpy>:
 494:	fb 01       	movw	r30, r22
 496:	dc 01       	movw	r26, r24
 498:	41 50       	subi	r20, 0x01	; 1
 49a:	50 40       	sbci	r21, 0x00	; 0
 49c:	48 f0       	brcs	.+18     	; 0x4b0 <strncpy+0x1c>
 49e:	01 90       	ld	r0, Z+
 4a0:	0d 92       	st	X+, r0
 4a2:	00 20       	and	r0, r0
 4a4:	c9 f7       	brne	.-14     	; 0x498 <strncpy+0x4>
 4a6:	01 c0       	rjmp	.+2      	; 0x4aa <strncpy+0x16>
 4a8:	1d 92       	st	X+, r1
 4aa:	41 50       	subi	r20, 0x01	; 1
 4ac:	50 40       	sbci	r21, 0x00	; 0
 4ae:	e0 f7       	brcc	.-8      	; 0x4a8 <strncpy+0x14>
 4b0:	08 95       	ret

000004b2 <_exit>:
 4b2:	f8 94       	cli

000004b4 <__stop_program>:
 4b4:	ff cf       	rjmp	.-2      	; 0x4b4 <__stop_program>
