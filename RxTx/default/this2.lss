
this2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001818  000018ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800134  00800134  000018e0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000131  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074a  00000000  00000000  00001a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000198  00000000  00000000  0000217b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000916  00000000  00000000  00002313  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00002c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b8  00000000  00000000  00002d0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e1       	ldi	r30, 0x18	; 24
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 33       	cpi	r26, 0x34	; 52
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e3       	ldi	r26, 0x34	; 52
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 33       	cpi	r26, 0x3D	; 61
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c3 07 	call	0xf86	; 0xf86 <main>
      9e:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <tx_char>:
#include <stdio.h>
void tx_char(unsigned char txChar)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	0f 92       	push	r0
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	89 83       	std	Y+1, r24	; 0x01
      while(!(UCSR0A & (1<<UDRE0)));
      b2:	e0 ec       	ldi	r30, 0xC0	; 192
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	88 2f       	mov	r24, r24
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	80 72       	andi	r24, 0x20	; 32
      be:	90 70       	andi	r25, 0x00	; 0
      c0:	00 97       	sbiw	r24, 0x00	; 0
      c2:	b9 f3       	breq	.-18     	; 0xb2 <tx_char+0xc>
   UDR0 = txChar;
      c4:	e6 ec       	ldi	r30, 0xC6	; 198
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	89 81       	ldd	r24, Y+1	; 0x01
      ca:	80 83       	st	Z, r24
}
      cc:	0f 90       	pop	r0
      ce:	cf 91       	pop	r28
      d0:	df 91       	pop	r29
      d2:	08 95       	ret

000000d4 <tx_str>:

void tx_str(unsigned char *txStr, int len)
{
      d4:	df 93       	push	r29
      d6:	cf 93       	push	r28
      d8:	00 d0       	rcall	.+0      	; 0xda <tx_str+0x6>
      da:	00 d0       	rcall	.+0      	; 0xdc <tx_str+0x8>
      dc:	00 d0       	rcall	.+0      	; 0xde <tx_str+0xa>
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	9c 83       	std	Y+4, r25	; 0x04
      e4:	8b 83       	std	Y+3, r24	; 0x03
      e6:	7e 83       	std	Y+6, r23	; 0x06
      e8:	6d 83       	std	Y+5, r22	; 0x05
   int i;
   for(i = 0;i< len; i++){
      ea:	1a 82       	std	Y+2, r1	; 0x02
      ec:	19 82       	std	Y+1, r1	; 0x01
      ee:	0f c0       	rjmp	.+30     	; 0x10e <tx_str+0x3a>
      tx_char(txStr[i]);
      f0:	29 81       	ldd	r18, Y+1	; 0x01
      f2:	3a 81       	ldd	r19, Y+2	; 0x02
      f4:	8b 81       	ldd	r24, Y+3	; 0x03
      f6:	9c 81       	ldd	r25, Y+4	; 0x04
      f8:	fc 01       	movw	r30, r24
      fa:	e2 0f       	add	r30, r18
      fc:	f3 1f       	adc	r31, r19
      fe:	80 81       	ld	r24, Z
     100:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_char>
}

void tx_str(unsigned char *txStr, int len)
{
   int i;
   for(i = 0;i< len; i++){
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	9a 81       	ldd	r25, Y+2	; 0x02
     108:	01 96       	adiw	r24, 0x01	; 1
     10a:	9a 83       	std	Y+2, r25	; 0x02
     10c:	89 83       	std	Y+1, r24	; 0x01
     10e:	29 81       	ldd	r18, Y+1	; 0x01
     110:	3a 81       	ldd	r19, Y+2	; 0x02
     112:	8d 81       	ldd	r24, Y+5	; 0x05
     114:	9e 81       	ldd	r25, Y+6	; 0x06
     116:	28 17       	cp	r18, r24
     118:	39 07       	cpc	r19, r25
     11a:	54 f3       	brlt	.-44     	; 0xf0 <tx_str+0x1c>
      tx_char(txStr[i]);
   }
}
     11c:	26 96       	adiw	r28, 0x06	; 6
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	f8 94       	cli
     122:	de bf       	out	0x3e, r29	; 62
     124:	0f be       	out	0x3f, r0	; 63
     126:	cd bf       	out	0x3d, r28	; 61
     128:	cf 91       	pop	r28
     12a:	df 91       	pop	r29
     12c:	08 95       	ret

0000012e <Printf>:

void Printf(char *fmt, ...)
{
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c4 58       	subi	r28, 0x84	; 132
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
	va_list 	arg_ptr;
	uint8_t 	i,len;
	char 	sText[128];
		
	/* text buffer */
	for (i = 0; i < 128; i++)
     144:	1a 82       	std	Y+2, r1	; 0x02
     146:	0c c0       	rjmp	.+24     	; 0x160 <Printf+0x32>
		sText[i] = 0;
     148:	8a 81       	ldd	r24, Y+2	; 0x02
     14a:	28 2f       	mov	r18, r24
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	ce 01       	movw	r24, r28
     150:	05 96       	adiw	r24, 0x05	; 5
     152:	fc 01       	movw	r30, r24
     154:	e2 0f       	add	r30, r18
     156:	f3 1f       	adc	r31, r19
     158:	10 82       	st	Z, r1
	va_list 	arg_ptr;
	uint8_t 	i,len;
	char 	sText[128];
		
	/* text buffer */
	for (i = 0; i < 128; i++)
     15a:	8a 81       	ldd	r24, Y+2	; 0x02
     15c:	8f 5f       	subi	r24, 0xFF	; 255
     15e:	8a 83       	std	Y+2, r24	; 0x02
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	88 23       	and	r24, r24
     164:	8c f7       	brge	.-30     	; 0x148 <Printf+0x1a>
		sText[i] = 0;

	va_start(arg_ptr, fmt);
     166:	ce 01       	movw	r24, r28
     168:	85 57       	subi	r24, 0x75	; 117
     16a:	9f 4f       	sbci	r25, 0xFF	; 255
     16c:	9c 83       	std	Y+4, r25	; 0x04
     16e:	8b 83       	std	Y+3, r24	; 0x03
	vsprintf(sText, fmt, arg_ptr);
     170:	4b 81       	ldd	r20, Y+3	; 0x03
     172:	5c 81       	ldd	r21, Y+4	; 0x04
     174:	ce 01       	movw	r24, r28
     176:	05 96       	adiw	r24, 0x05	; 5
     178:	c7 57       	subi	r28, 0x77	; 119
     17a:	df 4f       	sbci	r29, 0xFF	; 255
     17c:	28 81       	ld	r18, Y
     17e:	39 81       	ldd	r19, Y+1	; 0x01
     180:	c9 58       	subi	r28, 0x89	; 137
     182:	d0 40       	sbci	r29, 0x00	; 0
     184:	b9 01       	movw	r22, r18
     186:	0e 94 07 08 	call	0x100e	; 0x100e <vsprintf>
	va_end(arg_ptr);

	len = strlen(sText);
     18a:	ce 01       	movw	r24, r28
     18c:	05 96       	adiw	r24, 0x05	; 5
     18e:	0e 94 fe 07 	call	0xffc	; 0xffc <strlen>
     192:	89 83       	std	Y+1, r24	; 0x01
	for (i = 0; i < len; i++){
     194:	1a 82       	std	Y+2, r1	; 0x02
     196:	0e c0       	rjmp	.+28     	; 0x1b4 <Printf+0x86>
		tx_char(sText[i]);
     198:	8a 81       	ldd	r24, Y+2	; 0x02
     19a:	28 2f       	mov	r18, r24
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	ce 01       	movw	r24, r28
     1a0:	05 96       	adiw	r24, 0x05	; 5
     1a2:	fc 01       	movw	r30, r24
     1a4:	e2 0f       	add	r30, r18
     1a6:	f3 1f       	adc	r31, r19
     1a8:	80 81       	ld	r24, Z
     1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <tx_char>
	va_start(arg_ptr, fmt);
	vsprintf(sText, fmt, arg_ptr);
	va_end(arg_ptr);

	len = strlen(sText);
	for (i = 0; i < len; i++){
     1ae:	8a 81       	ldd	r24, Y+2	; 0x02
     1b0:	8f 5f       	subi	r24, 0xFF	; 255
     1b2:	8a 83       	std	Y+2, r24	; 0x02
     1b4:	9a 81       	ldd	r25, Y+2	; 0x02
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	98 17       	cp	r25, r24
     1ba:	70 f3       	brcs	.-36     	; 0x198 <Printf+0x6a>
		tx_char(sText[i]);
	}
}
     1bc:	cc 57       	subi	r28, 0x7C	; 124
     1be:	df 4f       	sbci	r29, 0xFF	; 255
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	cd bf       	out	0x3d, r28	; 61
     1ca:	cf 91       	pop	r28
     1cc:	df 91       	pop	r29
     1ce:	08 95       	ret

000001d0 <LED_ALL_ON_OFF>:
int LED_ALL_ON_OFF(int a)
{
     1d0:	df 93       	push	r29
     1d2:	cf 93       	push	r28
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
     1d8:	a3 97       	sbiw	r28, 0x23	; 35
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	f8 94       	cli
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	cd bf       	out	0x3d, r28	; 61
     1e4:	98 a3       	std	Y+32, r25	; 0x20
     1e6:	8f 8f       	std	Y+31, r24	; 0x1f
	for(int i=0 ; i<a; i++){
     1e8:	1e 8e       	std	Y+30, r1	; 0x1e
     1ea:	1d 8e       	std	Y+29, r1	; 0x1d
     1ec:	fe c0       	rjmp	.+508    	; 0x3ea <LED_ALL_ON_OFF+0x21a>
	PORTC = 0x00;
     1ee:	e8 e2       	ldi	r30, 0x28	; 40
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	10 82       	st	Z, r1
	PORTD = (PORTD & 0x0C)|0x00;
     1f4:	ab e2       	ldi	r26, 0x2B	; 43
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	eb e2       	ldi	r30, 0x2B	; 43
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	8c 70       	andi	r24, 0x0C	; 12
     200:	8c 93       	st	X, r24
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	a8 ec       	ldi	r26, 0xC8	; 200
     208:	b3 e4       	ldi	r27, 0x43	; 67
     20a:	89 8f       	std	Y+25, r24	; 0x19
     20c:	9a 8f       	std	Y+26, r25	; 0x1a
     20e:	ab 8f       	std	Y+27, r26	; 0x1b
     210:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     212:	69 8d       	ldd	r22, Y+25	; 0x19
     214:	7a 8d       	ldd	r23, Y+26	; 0x1a
     216:	8b 8d       	ldd	r24, Y+27	; 0x1b
     218:	9c 8d       	ldd	r25, Y+28	; 0x1c
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	4a e7       	ldi	r20, 0x7A	; 122
     220:	55 e4       	ldi	r21, 0x45	; 69
     222:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     226:	dc 01       	movw	r26, r24
     228:	cb 01       	movw	r24, r22
     22a:	8d 8b       	std	Y+21, r24	; 0x15
     22c:	9e 8b       	std	Y+22, r25	; 0x16
     22e:	af 8b       	std	Y+23, r26	; 0x17
     230:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     232:	6d 89       	ldd	r22, Y+21	; 0x15
     234:	7e 89       	ldd	r23, Y+22	; 0x16
     236:	8f 89       	ldd	r24, Y+23	; 0x17
     238:	98 8d       	ldd	r25, Y+24	; 0x18
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	40 e8       	ldi	r20, 0x80	; 128
     240:	5f e3       	ldi	r21, 0x3F	; 63
     242:	0e 94 23 08 	call	0x1046	; 0x1046 <__cmpsf2>
     246:	88 23       	and	r24, r24
     248:	2c f4       	brge	.+10     	; 0x254 <LED_ALL_ON_OFF+0x84>
		__ticks = 1;
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	9c 8b       	std	Y+20, r25	; 0x14
     250:	8b 8b       	std	Y+19, r24	; 0x13
     252:	3f c0       	rjmp	.+126    	; 0x2d2 <LED_ALL_ON_OFF+0x102>
	else if (__tmp > 65535)
     254:	6d 89       	ldd	r22, Y+21	; 0x15
     256:	7e 89       	ldd	r23, Y+22	; 0x16
     258:	8f 89       	ldd	r24, Y+23	; 0x17
     25a:	98 8d       	ldd	r25, Y+24	; 0x18
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	3f ef       	ldi	r19, 0xFF	; 255
     260:	4f e7       	ldi	r20, 0x7F	; 127
     262:	57 e4       	ldi	r21, 0x47	; 71
     264:	0e 94 a0 08 	call	0x1140	; 0x1140 <__gesf2>
     268:	18 16       	cp	r1, r24
     26a:	4c f5       	brge	.+82     	; 0x2be <LED_ALL_ON_OFF+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     26c:	69 8d       	ldd	r22, Y+25	; 0x19
     26e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     270:	8b 8d       	ldd	r24, Y+27	; 0x1b
     272:	9c 8d       	ldd	r25, Y+28	; 0x1c
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	40 e2       	ldi	r20, 0x20	; 32
     27a:	51 e4       	ldi	r21, 0x41	; 65
     27c:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     280:	dc 01       	movw	r26, r24
     282:	cb 01       	movw	r24, r22
     284:	bc 01       	movw	r22, r24
     286:	cd 01       	movw	r24, r26
     288:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     28c:	dc 01       	movw	r26, r24
     28e:	cb 01       	movw	r24, r22
     290:	9c 8b       	std	Y+20, r25	; 0x14
     292:	8b 8b       	std	Y+19, r24	; 0x13
     294:	0f c0       	rjmp	.+30     	; 0x2b4 <LED_ALL_ON_OFF+0xe4>
     296:	80 e9       	ldi	r24, 0x90	; 144
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	9a 8b       	std	Y+18, r25	; 0x12
     29c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29e:	89 89       	ldd	r24, Y+17	; 0x11
     2a0:	9a 89       	ldd	r25, Y+18	; 0x12
     2a2:	01 97       	sbiw	r24, 0x01	; 1
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LED_ALL_ON_OFF+0xd2>
     2a6:	9a 8b       	std	Y+18, r25	; 0x12
     2a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2aa:	8b 89       	ldd	r24, Y+19	; 0x13
     2ac:	9c 89       	ldd	r25, Y+20	; 0x14
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	9c 8b       	std	Y+20, r25	; 0x14
     2b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2b4:	8b 89       	ldd	r24, Y+19	; 0x13
     2b6:	9c 89       	ldd	r25, Y+20	; 0x14
     2b8:	00 97       	sbiw	r24, 0x00	; 0
     2ba:	69 f7       	brne	.-38     	; 0x296 <LED_ALL_ON_OFF+0xc6>
     2bc:	14 c0       	rjmp	.+40     	; 0x2e6 <LED_ALL_ON_OFF+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2be:	6d 89       	ldd	r22, Y+21	; 0x15
     2c0:	7e 89       	ldd	r23, Y+22	; 0x16
     2c2:	8f 89       	ldd	r24, Y+23	; 0x17
     2c4:	98 8d       	ldd	r25, Y+24	; 0x18
     2c6:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     2ca:	dc 01       	movw	r26, r24
     2cc:	cb 01       	movw	r24, r22
     2ce:	9c 8b       	std	Y+20, r25	; 0x14
     2d0:	8b 8b       	std	Y+19, r24	; 0x13
     2d2:	8b 89       	ldd	r24, Y+19	; 0x13
     2d4:	9c 89       	ldd	r25, Y+20	; 0x14
     2d6:	98 8b       	std	Y+16, r25	; 0x10
     2d8:	8f 87       	std	Y+15, r24	; 0x0f
     2da:	8f 85       	ldd	r24, Y+15	; 0x0f
     2dc:	98 89       	ldd	r25, Y+16	; 0x10
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <LED_ALL_ON_OFF+0x10e>
     2e2:	98 8b       	std	Y+16, r25	; 0x10
     2e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(400);
	PORTC = 0xFF;
     2e6:	e8 e2       	ldi	r30, 0x28	; 40
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	8f ef       	ldi	r24, 0xFF	; 255
     2ec:	80 83       	st	Z, r24
	PORTD = (PORTD & 0x0C)|0xFF;
     2ee:	eb e2       	ldi	r30, 0x2B	; 43
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	80 81       	ld	r24, Z
     2f4:	eb e2       	ldi	r30, 0x2B	; 43
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	8f ef       	ldi	r24, 0xFF	; 255
     2fa:	80 83       	st	Z, r24
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	a8 ec       	ldi	r26, 0xC8	; 200
     302:	b3 e4       	ldi	r27, 0x43	; 67
     304:	8b 87       	std	Y+11, r24	; 0x0b
     306:	9c 87       	std	Y+12, r25	; 0x0c
     308:	ad 87       	std	Y+13, r26	; 0x0d
     30a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     30c:	6b 85       	ldd	r22, Y+11	; 0x0b
     30e:	7c 85       	ldd	r23, Y+12	; 0x0c
     310:	8d 85       	ldd	r24, Y+13	; 0x0d
     312:	9e 85       	ldd	r25, Y+14	; 0x0e
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	4a e7       	ldi	r20, 0x7A	; 122
     31a:	55 e4       	ldi	r21, 0x45	; 69
     31c:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     320:	dc 01       	movw	r26, r24
     322:	cb 01       	movw	r24, r22
     324:	8f 83       	std	Y+7, r24	; 0x07
     326:	98 87       	std	Y+8, r25	; 0x08
     328:	a9 87       	std	Y+9, r26	; 0x09
     32a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     32c:	6f 81       	ldd	r22, Y+7	; 0x07
     32e:	78 85       	ldd	r23, Y+8	; 0x08
     330:	89 85       	ldd	r24, Y+9	; 0x09
     332:	9a 85       	ldd	r25, Y+10	; 0x0a
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	40 e8       	ldi	r20, 0x80	; 128
     33a:	5f e3       	ldi	r21, 0x3F	; 63
     33c:	0e 94 23 08 	call	0x1046	; 0x1046 <__cmpsf2>
     340:	88 23       	and	r24, r24
     342:	2c f4       	brge	.+10     	; 0x34e <LED_ALL_ON_OFF+0x17e>
		__ticks = 1;
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	9e 83       	std	Y+6, r25	; 0x06
     34a:	8d 83       	std	Y+5, r24	; 0x05
     34c:	3f c0       	rjmp	.+126    	; 0x3cc <LED_ALL_ON_OFF+0x1fc>
	else if (__tmp > 65535)
     34e:	6f 81       	ldd	r22, Y+7	; 0x07
     350:	78 85       	ldd	r23, Y+8	; 0x08
     352:	89 85       	ldd	r24, Y+9	; 0x09
     354:	9a 85       	ldd	r25, Y+10	; 0x0a
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	3f ef       	ldi	r19, 0xFF	; 255
     35a:	4f e7       	ldi	r20, 0x7F	; 127
     35c:	57 e4       	ldi	r21, 0x47	; 71
     35e:	0e 94 a0 08 	call	0x1140	; 0x1140 <__gesf2>
     362:	18 16       	cp	r1, r24
     364:	4c f5       	brge	.+82     	; 0x3b8 <LED_ALL_ON_OFF+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     366:	6b 85       	ldd	r22, Y+11	; 0x0b
     368:	7c 85       	ldd	r23, Y+12	; 0x0c
     36a:	8d 85       	ldd	r24, Y+13	; 0x0d
     36c:	9e 85       	ldd	r25, Y+14	; 0x0e
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	40 e2       	ldi	r20, 0x20	; 32
     374:	51 e4       	ldi	r21, 0x41	; 65
     376:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	bc 01       	movw	r22, r24
     380:	cd 01       	movw	r24, r26
     382:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     386:	dc 01       	movw	r26, r24
     388:	cb 01       	movw	r24, r22
     38a:	9e 83       	std	Y+6, r25	; 0x06
     38c:	8d 83       	std	Y+5, r24	; 0x05
     38e:	0f c0       	rjmp	.+30     	; 0x3ae <LED_ALL_ON_OFF+0x1de>
     390:	80 e9       	ldi	r24, 0x90	; 144
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	8b 83       	std	Y+3, r24	; 0x03
     398:	8b 81       	ldd	r24, Y+3	; 0x03
     39a:	9c 81       	ldd	r25, Y+4	; 0x04
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <LED_ALL_ON_OFF+0x1cc>
     3a0:	9c 83       	std	Y+4, r25	; 0x04
     3a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3a4:	8d 81       	ldd	r24, Y+5	; 0x05
     3a6:	9e 81       	ldd	r25, Y+6	; 0x06
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	9e 83       	std	Y+6, r25	; 0x06
     3ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ae:	8d 81       	ldd	r24, Y+5	; 0x05
     3b0:	9e 81       	ldd	r25, Y+6	; 0x06
     3b2:	00 97       	sbiw	r24, 0x00	; 0
     3b4:	69 f7       	brne	.-38     	; 0x390 <LED_ALL_ON_OFF+0x1c0>
     3b6:	14 c0       	rjmp	.+40     	; 0x3e0 <LED_ALL_ON_OFF+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3b8:	6f 81       	ldd	r22, Y+7	; 0x07
     3ba:	78 85       	ldd	r23, Y+8	; 0x08
     3bc:	89 85       	ldd	r24, Y+9	; 0x09
     3be:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c0:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     3c4:	dc 01       	movw	r26, r24
     3c6:	cb 01       	movw	r24, r22
     3c8:	9e 83       	std	Y+6, r25	; 0x06
     3ca:	8d 83       	std	Y+5, r24	; 0x05
     3cc:	8d 81       	ldd	r24, Y+5	; 0x05
     3ce:	9e 81       	ldd	r25, Y+6	; 0x06
     3d0:	9a 83       	std	Y+2, r25	; 0x02
     3d2:	89 83       	std	Y+1, r24	; 0x01
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	9a 81       	ldd	r25, Y+2	; 0x02
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <LED_ALL_ON_OFF+0x208>
     3dc:	9a 83       	std	Y+2, r25	; 0x02
     3de:	89 83       	std	Y+1, r24	; 0x01
int LED_ALL_ON_OFF(int a)
{
	for(int i=0 ; i<a; i++){
     3e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     3e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     3e4:	01 96       	adiw	r24, 0x01	; 1
     3e6:	9e 8f       	std	Y+30, r25	; 0x1e
     3e8:	8d 8f       	std	Y+29, r24	; 0x1d
     3ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
     3ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
     3ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3f0:	98 a1       	ldd	r25, Y+32	; 0x20
     3f2:	28 17       	cp	r18, r24
     3f4:	39 07       	cpc	r19, r25
     3f6:	0c f4       	brge	.+2      	; 0x3fa <LED_ALL_ON_OFF+0x22a>
     3f8:	fa ce       	rjmp	.-524    	; 0x1ee <LED_ALL_ON_OFF+0x1e>
	_delay_ms(400);
	PORTC = 0xFF;
	PORTD = (PORTD & 0x0C)|0xFF;
	_delay_ms(400);
	}
}
     3fa:	a3 96       	adiw	r28, 0x23	; 35
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	cf 91       	pop	r28
     408:	df 91       	pop	r29
     40a:	08 95       	ret

0000040c <LED_ANTERNATING_ON_OFF>:
int LED_ANTERNATING_ON_OFF(int a)
{
     40c:	df 93       	push	r29
     40e:	cf 93       	push	r28
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	a3 97       	sbiw	r28, 0x23	; 35
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	98 a3       	std	Y+32, r25	; 0x20
     422:	8f 8f       	std	Y+31, r24	; 0x1f
	for(int i=0 ; i<a ; i++){
     424:	1e 8e       	std	Y+30, r1	; 0x1e
     426:	1d 8e       	std	Y+29, r1	; 0x1d
     428:	ff c0       	rjmp	.+510    	; 0x628 <LED_ANTERNATING_ON_OFF+0x21c>
	PORTC = 0xF0;
     42a:	e8 e2       	ldi	r30, 0x28	; 40
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 ef       	ldi	r24, 0xF0	; 240
     430:	80 83       	st	Z, r24
	PORTD = (PORTD & 0x0C)|0xFF;
     432:	eb e2       	ldi	r30, 0x2B	; 43
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	eb e2       	ldi	r30, 0x2B	; 43
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	80 83       	st	Z, r24
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	a8 ec       	ldi	r26, 0xC8	; 200
     446:	b3 e4       	ldi	r27, 0x43	; 67
     448:	89 8f       	std	Y+25, r24	; 0x19
     44a:	9a 8f       	std	Y+26, r25	; 0x1a
     44c:	ab 8f       	std	Y+27, r26	; 0x1b
     44e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     450:	69 8d       	ldd	r22, Y+25	; 0x19
     452:	7a 8d       	ldd	r23, Y+26	; 0x1a
     454:	8b 8d       	ldd	r24, Y+27	; 0x1b
     456:	9c 8d       	ldd	r25, Y+28	; 0x1c
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	4a e7       	ldi	r20, 0x7A	; 122
     45e:	55 e4       	ldi	r21, 0x45	; 69
     460:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     464:	dc 01       	movw	r26, r24
     466:	cb 01       	movw	r24, r22
     468:	8d 8b       	std	Y+21, r24	; 0x15
     46a:	9e 8b       	std	Y+22, r25	; 0x16
     46c:	af 8b       	std	Y+23, r26	; 0x17
     46e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     470:	6d 89       	ldd	r22, Y+21	; 0x15
     472:	7e 89       	ldd	r23, Y+22	; 0x16
     474:	8f 89       	ldd	r24, Y+23	; 0x17
     476:	98 8d       	ldd	r25, Y+24	; 0x18
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	40 e8       	ldi	r20, 0x80	; 128
     47e:	5f e3       	ldi	r21, 0x3F	; 63
     480:	0e 94 23 08 	call	0x1046	; 0x1046 <__cmpsf2>
     484:	88 23       	and	r24, r24
     486:	2c f4       	brge	.+10     	; 0x492 <LED_ANTERNATING_ON_OFF+0x86>
		__ticks = 1;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	9c 8b       	std	Y+20, r25	; 0x14
     48e:	8b 8b       	std	Y+19, r24	; 0x13
     490:	3f c0       	rjmp	.+126    	; 0x510 <LED_ANTERNATING_ON_OFF+0x104>
	else if (__tmp > 65535)
     492:	6d 89       	ldd	r22, Y+21	; 0x15
     494:	7e 89       	ldd	r23, Y+22	; 0x16
     496:	8f 89       	ldd	r24, Y+23	; 0x17
     498:	98 8d       	ldd	r25, Y+24	; 0x18
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	3f ef       	ldi	r19, 0xFF	; 255
     49e:	4f e7       	ldi	r20, 0x7F	; 127
     4a0:	57 e4       	ldi	r21, 0x47	; 71
     4a2:	0e 94 a0 08 	call	0x1140	; 0x1140 <__gesf2>
     4a6:	18 16       	cp	r1, r24
     4a8:	4c f5       	brge	.+82     	; 0x4fc <LED_ANTERNATING_ON_OFF+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4aa:	69 8d       	ldd	r22, Y+25	; 0x19
     4ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	40 e2       	ldi	r20, 0x20	; 32
     4b8:	51 e4       	ldi	r21, 0x41	; 65
     4ba:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	bc 01       	movw	r22, r24
     4c4:	cd 01       	movw	r24, r26
     4c6:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     4ca:	dc 01       	movw	r26, r24
     4cc:	cb 01       	movw	r24, r22
     4ce:	9c 8b       	std	Y+20, r25	; 0x14
     4d0:	8b 8b       	std	Y+19, r24	; 0x13
     4d2:	0f c0       	rjmp	.+30     	; 0x4f2 <LED_ANTERNATING_ON_OFF+0xe6>
     4d4:	80 e9       	ldi	r24, 0x90	; 144
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	9a 8b       	std	Y+18, r25	; 0x12
     4da:	89 8b       	std	Y+17, r24	; 0x11
     4dc:	89 89       	ldd	r24, Y+17	; 0x11
     4de:	9a 89       	ldd	r25, Y+18	; 0x12
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <LED_ANTERNATING_ON_OFF+0xd4>
     4e4:	9a 8b       	std	Y+18, r25	; 0x12
     4e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4e8:	8b 89       	ldd	r24, Y+19	; 0x13
     4ea:	9c 89       	ldd	r25, Y+20	; 0x14
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	9c 8b       	std	Y+20, r25	; 0x14
     4f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4f2:	8b 89       	ldd	r24, Y+19	; 0x13
     4f4:	9c 89       	ldd	r25, Y+20	; 0x14
     4f6:	00 97       	sbiw	r24, 0x00	; 0
     4f8:	69 f7       	brne	.-38     	; 0x4d4 <LED_ANTERNATING_ON_OFF+0xc8>
     4fa:	14 c0       	rjmp	.+40     	; 0x524 <LED_ANTERNATING_ON_OFF+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4fc:	6d 89       	ldd	r22, Y+21	; 0x15
     4fe:	7e 89       	ldd	r23, Y+22	; 0x16
     500:	8f 89       	ldd	r24, Y+23	; 0x17
     502:	98 8d       	ldd	r25, Y+24	; 0x18
     504:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	9c 8b       	std	Y+20, r25	; 0x14
     50e:	8b 8b       	std	Y+19, r24	; 0x13
     510:	8b 89       	ldd	r24, Y+19	; 0x13
     512:	9c 89       	ldd	r25, Y+20	; 0x14
     514:	98 8b       	std	Y+16, r25	; 0x10
     516:	8f 87       	std	Y+15, r24	; 0x0f
     518:	8f 85       	ldd	r24, Y+15	; 0x0f
     51a:	98 89       	ldd	r25, Y+16	; 0x10
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	f1 f7       	brne	.-4      	; 0x51c <LED_ANTERNATING_ON_OFF+0x110>
     520:	98 8b       	std	Y+16, r25	; 0x10
     522:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(400);
	PORTC = 0x0F;
     524:	e8 e2       	ldi	r30, 0x28	; 40
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	8f e0       	ldi	r24, 0x0F	; 15
     52a:	80 83       	st	Z, r24
	PORTD = (PORTD & 0x0C)|0x00;
     52c:	ab e2       	ldi	r26, 0x2B	; 43
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	eb e2       	ldi	r30, 0x2B	; 43
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	80 81       	ld	r24, Z
     536:	8c 70       	andi	r24, 0x0C	; 12
     538:	8c 93       	st	X, r24
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	a8 ec       	ldi	r26, 0xC8	; 200
     540:	b3 e4       	ldi	r27, 0x43	; 67
     542:	8b 87       	std	Y+11, r24	; 0x0b
     544:	9c 87       	std	Y+12, r25	; 0x0c
     546:	ad 87       	std	Y+13, r26	; 0x0d
     548:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     54a:	6b 85       	ldd	r22, Y+11	; 0x0b
     54c:	7c 85       	ldd	r23, Y+12	; 0x0c
     54e:	8d 85       	ldd	r24, Y+13	; 0x0d
     550:	9e 85       	ldd	r25, Y+14	; 0x0e
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	4a e7       	ldi	r20, 0x7A	; 122
     558:	55 e4       	ldi	r21, 0x45	; 69
     55a:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     55e:	dc 01       	movw	r26, r24
     560:	cb 01       	movw	r24, r22
     562:	8f 83       	std	Y+7, r24	; 0x07
     564:	98 87       	std	Y+8, r25	; 0x08
     566:	a9 87       	std	Y+9, r26	; 0x09
     568:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     56a:	6f 81       	ldd	r22, Y+7	; 0x07
     56c:	78 85       	ldd	r23, Y+8	; 0x08
     56e:	89 85       	ldd	r24, Y+9	; 0x09
     570:	9a 85       	ldd	r25, Y+10	; 0x0a
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e8       	ldi	r20, 0x80	; 128
     578:	5f e3       	ldi	r21, 0x3F	; 63
     57a:	0e 94 23 08 	call	0x1046	; 0x1046 <__cmpsf2>
     57e:	88 23       	and	r24, r24
     580:	2c f4       	brge	.+10     	; 0x58c <LED_ANTERNATING_ON_OFF+0x180>
		__ticks = 1;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	9e 83       	std	Y+6, r25	; 0x06
     588:	8d 83       	std	Y+5, r24	; 0x05
     58a:	3f c0       	rjmp	.+126    	; 0x60a <LED_ANTERNATING_ON_OFF+0x1fe>
	else if (__tmp > 65535)
     58c:	6f 81       	ldd	r22, Y+7	; 0x07
     58e:	78 85       	ldd	r23, Y+8	; 0x08
     590:	89 85       	ldd	r24, Y+9	; 0x09
     592:	9a 85       	ldd	r25, Y+10	; 0x0a
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	3f ef       	ldi	r19, 0xFF	; 255
     598:	4f e7       	ldi	r20, 0x7F	; 127
     59a:	57 e4       	ldi	r21, 0x47	; 71
     59c:	0e 94 a0 08 	call	0x1140	; 0x1140 <__gesf2>
     5a0:	18 16       	cp	r1, r24
     5a2:	4c f5       	brge	.+82     	; 0x5f6 <LED_ANTERNATING_ON_OFF+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5a4:	6b 85       	ldd	r22, Y+11	; 0x0b
     5a6:	7c 85       	ldd	r23, Y+12	; 0x0c
     5a8:	8d 85       	ldd	r24, Y+13	; 0x0d
     5aa:	9e 85       	ldd	r25, Y+14	; 0x0e
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	40 e2       	ldi	r20, 0x20	; 32
     5b2:	51 e4       	ldi	r21, 0x41	; 65
     5b4:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     5b8:	dc 01       	movw	r26, r24
     5ba:	cb 01       	movw	r24, r22
     5bc:	bc 01       	movw	r22, r24
     5be:	cd 01       	movw	r24, r26
     5c0:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     5c4:	dc 01       	movw	r26, r24
     5c6:	cb 01       	movw	r24, r22
     5c8:	9e 83       	std	Y+6, r25	; 0x06
     5ca:	8d 83       	std	Y+5, r24	; 0x05
     5cc:	0f c0       	rjmp	.+30     	; 0x5ec <LED_ANTERNATING_ON_OFF+0x1e0>
     5ce:	80 e9       	ldi	r24, 0x90	; 144
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	9c 83       	std	Y+4, r25	; 0x04
     5d4:	8b 83       	std	Y+3, r24	; 0x03
     5d6:	8b 81       	ldd	r24, Y+3	; 0x03
     5d8:	9c 81       	ldd	r25, Y+4	; 0x04
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <LED_ANTERNATING_ON_OFF+0x1ce>
     5de:	9c 83       	std	Y+4, r25	; 0x04
     5e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e2:	8d 81       	ldd	r24, Y+5	; 0x05
     5e4:	9e 81       	ldd	r25, Y+6	; 0x06
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	9e 83       	std	Y+6, r25	; 0x06
     5ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ec:	8d 81       	ldd	r24, Y+5	; 0x05
     5ee:	9e 81       	ldd	r25, Y+6	; 0x06
     5f0:	00 97       	sbiw	r24, 0x00	; 0
     5f2:	69 f7       	brne	.-38     	; 0x5ce <LED_ANTERNATING_ON_OFF+0x1c2>
     5f4:	14 c0       	rjmp	.+40     	; 0x61e <LED_ANTERNATING_ON_OFF+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5f6:	6f 81       	ldd	r22, Y+7	; 0x07
     5f8:	78 85       	ldd	r23, Y+8	; 0x08
     5fa:	89 85       	ldd	r24, Y+9	; 0x09
     5fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5fe:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     602:	dc 01       	movw	r26, r24
     604:	cb 01       	movw	r24, r22
     606:	9e 83       	std	Y+6, r25	; 0x06
     608:	8d 83       	std	Y+5, r24	; 0x05
     60a:	8d 81       	ldd	r24, Y+5	; 0x05
     60c:	9e 81       	ldd	r25, Y+6	; 0x06
     60e:	9a 83       	std	Y+2, r25	; 0x02
     610:	89 83       	std	Y+1, r24	; 0x01
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	9a 81       	ldd	r25, Y+2	; 0x02
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	f1 f7       	brne	.-4      	; 0x616 <LED_ANTERNATING_ON_OFF+0x20a>
     61a:	9a 83       	std	Y+2, r25	; 0x02
     61c:	89 83       	std	Y+1, r24	; 0x01
int LED_ANTERNATING_ON_OFF(int a)
{
	for(int i=0 ; i<a ; i++){
     61e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     620:	9e 8d       	ldd	r25, Y+30	; 0x1e
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	9e 8f       	std	Y+30, r25	; 0x1e
     626:	8d 8f       	std	Y+29, r24	; 0x1d
     628:	2d 8d       	ldd	r18, Y+29	; 0x1d
     62a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     62c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     62e:	98 a1       	ldd	r25, Y+32	; 0x20
     630:	28 17       	cp	r18, r24
     632:	39 07       	cpc	r19, r25
     634:	0c f4       	brge	.+2      	; 0x638 <LED_ANTERNATING_ON_OFF+0x22c>
     636:	f9 ce       	rjmp	.-526    	; 0x42a <LED_ANTERNATING_ON_OFF+0x1e>
	_delay_ms(400);
	PORTC = 0x0F;
	PORTD = (PORTD & 0x0C)|0x00;
	_delay_ms(400);
	}
}
     638:	a3 96       	adiw	r28, 0x23	; 35
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	cf 91       	pop	r28
     646:	df 91       	pop	r29
     648:	08 95       	ret

0000064a <LED_SHIFT>:
int LED_SHIFT(int a)
{
     64a:	df 93       	push	r29
     64c:	cf 93       	push	r28
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	c9 54       	subi	r28, 0x49	; 73
     654:	d0 40       	sbci	r29, 0x00	; 0
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	fe 01       	movw	r30, r28
     662:	ed 5b       	subi	r30, 0xBD	; 189
     664:	ff 4f       	sbci	r31, 0xFF	; 255
     666:	91 83       	std	Z+1, r25	; 0x01
     668:	80 83       	st	Z, r24
	PORTC = 0xFF;
     66a:	e8 e2       	ldi	r30, 0x28	; 40
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	8f ef       	ldi	r24, 0xFF	; 255
     670:	80 83       	st	Z, r24
	PORTD = (PORTD & 0xC0)|0xFF;
     672:	eb e2       	ldi	r30, 0x2B	; 43
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
     678:	eb e2       	ldi	r30, 0x2B	; 43
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	8f ef       	ldi	r24, 0xFF	; 255
     67e:	80 83       	st	Z, r24
	for(int i=0; i<a; i++){
     680:	fe 01       	movw	r30, r28
     682:	ef 5b       	subi	r30, 0xBF	; 191
     684:	ff 4f       	sbci	r31, 0xFF	; 255
     686:	11 82       	std	Z+1, r1	; 0x01
     688:	10 82       	st	Z, r1
     68a:	61 c2       	rjmp	.+1218   	; 0xb4e <__stack+0x24f>
		for(int i=0; i<6; i++){
     68c:	fe 01       	movw	r30, r28
     68e:	ff 96       	adiw	r30, 0x3f	; 63
     690:	11 82       	std	Z+1, r1	; 0x01
     692:	10 82       	st	Z, r1
     694:	8b c0       	rjmp	.+278    	; 0x7ac <LED_SHIFT+0x162>
		PORTC = ~(0x01 << i); // PORTC 0~5 = LED 0~5, PORTD 0,1 = LED 6,7
     696:	e8 e2       	ldi	r30, 0x28	; 40
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0f ac       	ldd	r0, Y+63	; 0x3f
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <LED_SHIFT+0x5c>
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	0a 94       	dec	r0
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <LED_SHIFT+0x58>
     6aa:	80 95       	com	r24
     6ac:	80 83       	st	Z, r24
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	a8 ec       	ldi	r26, 0xC8	; 200
     6b4:	b3 e4       	ldi	r27, 0x43	; 67
     6b6:	8d ab       	std	Y+53, r24	; 0x35
     6b8:	9e ab       	std	Y+54, r25	; 0x36
     6ba:	af ab       	std	Y+55, r26	; 0x37
     6bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6be:	6d a9       	ldd	r22, Y+53	; 0x35
     6c0:	7e a9       	ldd	r23, Y+54	; 0x36
     6c2:	8f a9       	ldd	r24, Y+55	; 0x37
     6c4:	98 ad       	ldd	r25, Y+56	; 0x38
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	4a e7       	ldi	r20, 0x7A	; 122
     6cc:	55 e4       	ldi	r21, 0x45	; 69
     6ce:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     6d2:	dc 01       	movw	r26, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	89 ab       	std	Y+49, r24	; 0x31
     6d8:	9a ab       	std	Y+50, r25	; 0x32
     6da:	ab ab       	std	Y+51, r26	; 0x33
     6dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     6de:	69 a9       	ldd	r22, Y+49	; 0x31
     6e0:	7a a9       	ldd	r23, Y+50	; 0x32
     6e2:	8b a9       	ldd	r24, Y+51	; 0x33
     6e4:	9c a9       	ldd	r25, Y+52	; 0x34
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e8       	ldi	r20, 0x80	; 128
     6ec:	5f e3       	ldi	r21, 0x3F	; 63
     6ee:	0e 94 23 08 	call	0x1046	; 0x1046 <__cmpsf2>
     6f2:	88 23       	and	r24, r24
     6f4:	2c f4       	brge	.+10     	; 0x700 <LED_SHIFT+0xb6>
		__ticks = 1;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	98 ab       	std	Y+48, r25	; 0x30
     6fc:	8f a7       	std	Y+47, r24	; 0x2f
     6fe:	3f c0       	rjmp	.+126    	; 0x77e <LED_SHIFT+0x134>
	else if (__tmp > 65535)
     700:	69 a9       	ldd	r22, Y+49	; 0x31
     702:	7a a9       	ldd	r23, Y+50	; 0x32
     704:	8b a9       	ldd	r24, Y+51	; 0x33
     706:	9c a9       	ldd	r25, Y+52	; 0x34
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	3f ef       	ldi	r19, 0xFF	; 255
     70c:	4f e7       	ldi	r20, 0x7F	; 127
     70e:	57 e4       	ldi	r21, 0x47	; 71
     710:	0e 94 a0 08 	call	0x1140	; 0x1140 <__gesf2>
     714:	18 16       	cp	r1, r24
     716:	4c f5       	brge	.+82     	; 0x76a <LED_SHIFT+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     718:	6d a9       	ldd	r22, Y+53	; 0x35
     71a:	7e a9       	ldd	r23, Y+54	; 0x36
     71c:	8f a9       	ldd	r24, Y+55	; 0x37
     71e:	98 ad       	ldd	r25, Y+56	; 0x38
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	40 e2       	ldi	r20, 0x20	; 32
     726:	51 e4       	ldi	r21, 0x41	; 65
     728:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     72c:	dc 01       	movw	r26, r24
     72e:	cb 01       	movw	r24, r22
     730:	bc 01       	movw	r22, r24
     732:	cd 01       	movw	r24, r26
     734:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     738:	dc 01       	movw	r26, r24
     73a:	cb 01       	movw	r24, r22
     73c:	98 ab       	std	Y+48, r25	; 0x30
     73e:	8f a7       	std	Y+47, r24	; 0x2f
     740:	0f c0       	rjmp	.+30     	; 0x760 <LED_SHIFT+0x116>
     742:	80 e9       	ldi	r24, 0x90	; 144
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	9e a7       	std	Y+46, r25	; 0x2e
     748:	8d a7       	std	Y+45, r24	; 0x2d
     74a:	8d a5       	ldd	r24, Y+45	; 0x2d
     74c:	9e a5       	ldd	r25, Y+46	; 0x2e
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <LED_SHIFT+0x104>
     752:	9e a7       	std	Y+46, r25	; 0x2e
     754:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     756:	8f a5       	ldd	r24, Y+47	; 0x2f
     758:	98 a9       	ldd	r25, Y+48	; 0x30
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	98 ab       	std	Y+48, r25	; 0x30
     75e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     760:	8f a5       	ldd	r24, Y+47	; 0x2f
     762:	98 a9       	ldd	r25, Y+48	; 0x30
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	69 f7       	brne	.-38     	; 0x742 <LED_SHIFT+0xf8>
     768:	14 c0       	rjmp	.+40     	; 0x792 <LED_SHIFT+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     76a:	69 a9       	ldd	r22, Y+49	; 0x31
     76c:	7a a9       	ldd	r23, Y+50	; 0x32
     76e:	8b a9       	ldd	r24, Y+51	; 0x33
     770:	9c a9       	ldd	r25, Y+52	; 0x34
     772:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     776:	dc 01       	movw	r26, r24
     778:	cb 01       	movw	r24, r22
     77a:	98 ab       	std	Y+48, r25	; 0x30
     77c:	8f a7       	std	Y+47, r24	; 0x2f
     77e:	8f a5       	ldd	r24, Y+47	; 0x2f
     780:	98 a9       	ldd	r25, Y+48	; 0x30
     782:	9c a7       	std	Y+44, r25	; 0x2c
     784:	8b a7       	std	Y+43, r24	; 0x2b
     786:	8b a5       	ldd	r24, Y+43	; 0x2b
     788:	9c a5       	ldd	r25, Y+44	; 0x2c
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	f1 f7       	brne	.-4      	; 0x78a <LED_SHIFT+0x140>
     78e:	9c a7       	std	Y+44, r25	; 0x2c
     790:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(400);
		PORTC = 0xFF;
     792:	e8 e2       	ldi	r30, 0x28	; 40
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	8f ef       	ldi	r24, 0xFF	; 255
     798:	80 83       	st	Z, r24
int LED_SHIFT(int a)
{
	PORTC = 0xFF;
	PORTD = (PORTD & 0xC0)|0xFF;
	for(int i=0; i<a; i++){
		for(int i=0; i<6; i++){
     79a:	fe 01       	movw	r30, r28
     79c:	ff 96       	adiw	r30, 0x3f	; 63
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	fe 01       	movw	r30, r28
     7a6:	ff 96       	adiw	r30, 0x3f	; 63
     7a8:	91 83       	std	Z+1, r25	; 0x01
     7aa:	80 83       	st	Z, r24
     7ac:	fe 01       	movw	r30, r28
     7ae:	ff 96       	adiw	r30, 0x3f	; 63
     7b0:	80 81       	ld	r24, Z
     7b2:	91 81       	ldd	r25, Z+1	; 0x01
     7b4:	86 30       	cpi	r24, 0x06	; 6
     7b6:	91 05       	cpc	r25, r1
     7b8:	0c f4       	brge	.+2      	; 0x7bc <LED_SHIFT+0x172>
     7ba:	6d cf       	rjmp	.-294    	; 0x696 <LED_SHIFT+0x4c>
		PORTC = ~(0x01 << i); // PORTC 0~5 = LED 0~5, PORTD 0,1 = LED 6,7
		_delay_ms(400);
		PORTC = 0xFF;
		}
		for(int i=0; i<1; i++){
     7bc:	1e ae       	std	Y+62, r1	; 0x3e
     7be:	1d ae       	std	Y+61, r1	; 0x3d
     7c0:	90 c0       	rjmp	.+288    	; 0x8e2 <LED_SHIFT+0x298>
		PORTD = (PORTD & 0x0C)|~(0x10<<i);
     7c2:	ab e2       	ldi	r26, 0x2B	; 43
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	eb e2       	ldi	r30, 0x2B	; 43
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	28 2f       	mov	r18, r24
     7ce:	2c 70       	andi	r18, 0x0C	; 12
     7d0:	80 e1       	ldi	r24, 0x10	; 16
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0d ac       	ldd	r0, Y+61	; 0x3d
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <LED_SHIFT+0x192>
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	0a 94       	dec	r0
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <LED_SHIFT+0x18e>
     7e0:	80 95       	com	r24
     7e2:	82 2b       	or	r24, r18
     7e4:	8c 93       	st	X, r24
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	a8 ec       	ldi	r26, 0xC8	; 200
     7ec:	b3 e4       	ldi	r27, 0x43	; 67
     7ee:	8f a3       	std	Y+39, r24	; 0x27
     7f0:	98 a7       	std	Y+40, r25	; 0x28
     7f2:	a9 a7       	std	Y+41, r26	; 0x29
     7f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7f6:	6f a1       	ldd	r22, Y+39	; 0x27
     7f8:	78 a5       	ldd	r23, Y+40	; 0x28
     7fa:	89 a5       	ldd	r24, Y+41	; 0x29
     7fc:	9a a5       	ldd	r25, Y+42	; 0x2a
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	4a e7       	ldi	r20, 0x7A	; 122
     804:	55 e4       	ldi	r21, 0x45	; 69
     806:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     80a:	dc 01       	movw	r26, r24
     80c:	cb 01       	movw	r24, r22
     80e:	8b a3       	std	Y+35, r24	; 0x23
     810:	9c a3       	std	Y+36, r25	; 0x24
     812:	ad a3       	std	Y+37, r26	; 0x25
     814:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     816:	6b a1       	ldd	r22, Y+35	; 0x23
     818:	7c a1       	ldd	r23, Y+36	; 0x24
     81a:	8d a1       	ldd	r24, Y+37	; 0x25
     81c:	9e a1       	ldd	r25, Y+38	; 0x26
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	40 e8       	ldi	r20, 0x80	; 128
     824:	5f e3       	ldi	r21, 0x3F	; 63
     826:	0e 94 23 08 	call	0x1046	; 0x1046 <__cmpsf2>
     82a:	88 23       	and	r24, r24
     82c:	2c f4       	brge	.+10     	; 0x838 <LED_SHIFT+0x1ee>
		__ticks = 1;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	9a a3       	std	Y+34, r25	; 0x22
     834:	89 a3       	std	Y+33, r24	; 0x21
     836:	3f c0       	rjmp	.+126    	; 0x8b6 <LED_SHIFT+0x26c>
	else if (__tmp > 65535)
     838:	6b a1       	ldd	r22, Y+35	; 0x23
     83a:	7c a1       	ldd	r23, Y+36	; 0x24
     83c:	8d a1       	ldd	r24, Y+37	; 0x25
     83e:	9e a1       	ldd	r25, Y+38	; 0x26
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	3f ef       	ldi	r19, 0xFF	; 255
     844:	4f e7       	ldi	r20, 0x7F	; 127
     846:	57 e4       	ldi	r21, 0x47	; 71
     848:	0e 94 a0 08 	call	0x1140	; 0x1140 <__gesf2>
     84c:	18 16       	cp	r1, r24
     84e:	4c f5       	brge	.+82     	; 0x8a2 <LED_SHIFT+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     850:	6f a1       	ldd	r22, Y+39	; 0x27
     852:	78 a5       	ldd	r23, Y+40	; 0x28
     854:	89 a5       	ldd	r24, Y+41	; 0x29
     856:	9a a5       	ldd	r25, Y+42	; 0x2a
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	40 e2       	ldi	r20, 0x20	; 32
     85e:	51 e4       	ldi	r21, 0x41	; 65
     860:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	bc 01       	movw	r22, r24
     86a:	cd 01       	movw	r24, r26
     86c:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	9a a3       	std	Y+34, r25	; 0x22
     876:	89 a3       	std	Y+33, r24	; 0x21
     878:	0f c0       	rjmp	.+30     	; 0x898 <LED_SHIFT+0x24e>
     87a:	80 e9       	ldi	r24, 0x90	; 144
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	98 a3       	std	Y+32, r25	; 0x20
     880:	8f 8f       	std	Y+31, r24	; 0x1f
     882:	8f 8d       	ldd	r24, Y+31	; 0x1f
     884:	98 a1       	ldd	r25, Y+32	; 0x20
     886:	01 97       	sbiw	r24, 0x01	; 1
     888:	f1 f7       	brne	.-4      	; 0x886 <LED_SHIFT+0x23c>
     88a:	98 a3       	std	Y+32, r25	; 0x20
     88c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     88e:	89 a1       	ldd	r24, Y+33	; 0x21
     890:	9a a1       	ldd	r25, Y+34	; 0x22
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	9a a3       	std	Y+34, r25	; 0x22
     896:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     898:	89 a1       	ldd	r24, Y+33	; 0x21
     89a:	9a a1       	ldd	r25, Y+34	; 0x22
     89c:	00 97       	sbiw	r24, 0x00	; 0
     89e:	69 f7       	brne	.-38     	; 0x87a <LED_SHIFT+0x230>
     8a0:	14 c0       	rjmp	.+40     	; 0x8ca <LED_SHIFT+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8a2:	6b a1       	ldd	r22, Y+35	; 0x23
     8a4:	7c a1       	ldd	r23, Y+36	; 0x24
     8a6:	8d a1       	ldd	r24, Y+37	; 0x25
     8a8:	9e a1       	ldd	r25, Y+38	; 0x26
     8aa:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     8ae:	dc 01       	movw	r26, r24
     8b0:	cb 01       	movw	r24, r22
     8b2:	9a a3       	std	Y+34, r25	; 0x22
     8b4:	89 a3       	std	Y+33, r24	; 0x21
     8b6:	89 a1       	ldd	r24, Y+33	; 0x21
     8b8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ba:	9e 8f       	std	Y+30, r25	; 0x1e
     8bc:	8d 8f       	std	Y+29, r24	; 0x1d
     8be:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <LED_SHIFT+0x278>
     8c6:	9e 8f       	std	Y+30, r25	; 0x1e
     8c8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(400);
		PORTD = (PORTD & 0x0C)|0xFF;
     8ca:	eb e2       	ldi	r30, 0x2B	; 43
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	eb e2       	ldi	r30, 0x2B	; 43
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	80 83       	st	Z, r24
		for(int i=0; i<6; i++){
		PORTC = ~(0x01 << i); // PORTC 0~5 = LED 0~5, PORTD 0,1 = LED 6,7
		_delay_ms(400);
		PORTC = 0xFF;
		}
		for(int i=0; i<1; i++){
     8d8:	8d ad       	ldd	r24, Y+61	; 0x3d
     8da:	9e ad       	ldd	r25, Y+62	; 0x3e
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	9e af       	std	Y+62, r25	; 0x3e
     8e0:	8d af       	std	Y+61, r24	; 0x3d
     8e2:	8d ad       	ldd	r24, Y+61	; 0x3d
     8e4:	9e ad       	ldd	r25, Y+62	; 0x3e
     8e6:	18 16       	cp	r1, r24
     8e8:	19 06       	cpc	r1, r25
     8ea:	0c f0       	brlt	.+2      	; 0x8ee <LED_SHIFT+0x2a4>
     8ec:	6a cf       	rjmp	.-300    	; 0x7c2 <LED_SHIFT+0x178>
		PORTD = (PORTD & 0x0C)|~(0x10<<i);
		_delay_ms(400);
		PORTD = (PORTD & 0x0C)|0xFF;
		}
		for(int i=0; i<2; i++){
     8ee:	1c ae       	std	Y+60, r1	; 0x3c
     8f0:	1b ae       	std	Y+59, r1	; 0x3b
     8f2:	90 c0       	rjmp	.+288    	; 0xa14 <__stack+0x115>
		PORTD = (PORTD & 0x0C)|~(0x20>>i);
     8f4:	ab e2       	ldi	r26, 0x2B	; 43
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	eb e2       	ldi	r30, 0x2B	; 43
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	28 2f       	mov	r18, r24
     900:	2c 70       	andi	r18, 0x0C	; 12
     902:	80 e2       	ldi	r24, 0x20	; 32
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0b ac       	ldd	r0, Y+59	; 0x3b
     908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xf>
     90a:	95 95       	asr	r25
     90c:	87 95       	ror	r24
     90e:	0a 94       	dec	r0
     910:	e2 f7       	brpl	.-8      	; 0x90a <__stack+0xb>
     912:	80 95       	com	r24
     914:	82 2b       	or	r24, r18
     916:	8c 93       	st	X, r24
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a8 ec       	ldi	r26, 0xC8	; 200
     91e:	b3 e4       	ldi	r27, 0x43	; 67
     920:	89 8f       	std	Y+25, r24	; 0x19
     922:	9a 8f       	std	Y+26, r25	; 0x1a
     924:	ab 8f       	std	Y+27, r26	; 0x1b
     926:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     928:	69 8d       	ldd	r22, Y+25	; 0x19
     92a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     92c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     92e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	4a e7       	ldi	r20, 0x7A	; 122
     936:	55 e4       	ldi	r21, 0x45	; 69
     938:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     93c:	dc 01       	movw	r26, r24
     93e:	cb 01       	movw	r24, r22
     940:	8d 8b       	std	Y+21, r24	; 0x15
     942:	9e 8b       	std	Y+22, r25	; 0x16
     944:	af 8b       	std	Y+23, r26	; 0x17
     946:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     948:	6d 89       	ldd	r22, Y+21	; 0x15
     94a:	7e 89       	ldd	r23, Y+22	; 0x16
     94c:	8f 89       	ldd	r24, Y+23	; 0x17
     94e:	98 8d       	ldd	r25, Y+24	; 0x18
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e8       	ldi	r20, 0x80	; 128
     956:	5f e3       	ldi	r21, 0x3F	; 63
     958:	0e 94 23 08 	call	0x1046	; 0x1046 <__cmpsf2>
     95c:	88 23       	and	r24, r24
     95e:	2c f4       	brge	.+10     	; 0x96a <__stack+0x6b>
		__ticks = 1;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	9c 8b       	std	Y+20, r25	; 0x14
     966:	8b 8b       	std	Y+19, r24	; 0x13
     968:	3f c0       	rjmp	.+126    	; 0x9e8 <__stack+0xe9>
	else if (__tmp > 65535)
     96a:	6d 89       	ldd	r22, Y+21	; 0x15
     96c:	7e 89       	ldd	r23, Y+22	; 0x16
     96e:	8f 89       	ldd	r24, Y+23	; 0x17
     970:	98 8d       	ldd	r25, Y+24	; 0x18
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	3f ef       	ldi	r19, 0xFF	; 255
     976:	4f e7       	ldi	r20, 0x7F	; 127
     978:	57 e4       	ldi	r21, 0x47	; 71
     97a:	0e 94 a0 08 	call	0x1140	; 0x1140 <__gesf2>
     97e:	18 16       	cp	r1, r24
     980:	4c f5       	brge	.+82     	; 0x9d4 <__stack+0xd5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     982:	69 8d       	ldd	r22, Y+25	; 0x19
     984:	7a 8d       	ldd	r23, Y+26	; 0x1a
     986:	8b 8d       	ldd	r24, Y+27	; 0x1b
     988:	9c 8d       	ldd	r25, Y+28	; 0x1c
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e2       	ldi	r20, 0x20	; 32
     990:	51 e4       	ldi	r21, 0x41	; 65
     992:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     996:	dc 01       	movw	r26, r24
     998:	cb 01       	movw	r24, r22
     99a:	bc 01       	movw	r22, r24
     99c:	cd 01       	movw	r24, r26
     99e:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     9a2:	dc 01       	movw	r26, r24
     9a4:	cb 01       	movw	r24, r22
     9a6:	9c 8b       	std	Y+20, r25	; 0x14
     9a8:	8b 8b       	std	Y+19, r24	; 0x13
     9aa:	0f c0       	rjmp	.+30     	; 0x9ca <__stack+0xcb>
     9ac:	80 e9       	ldi	r24, 0x90	; 144
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	9a 8b       	std	Y+18, r25	; 0x12
     9b2:	89 8b       	std	Y+17, r24	; 0x11
     9b4:	89 89       	ldd	r24, Y+17	; 0x11
     9b6:	9a 89       	ldd	r25, Y+18	; 0x12
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	f1 f7       	brne	.-4      	; 0x9b8 <__stack+0xb9>
     9bc:	9a 8b       	std	Y+18, r25	; 0x12
     9be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c0:	8b 89       	ldd	r24, Y+19	; 0x13
     9c2:	9c 89       	ldd	r25, Y+20	; 0x14
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	9c 8b       	std	Y+20, r25	; 0x14
     9c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ca:	8b 89       	ldd	r24, Y+19	; 0x13
     9cc:	9c 89       	ldd	r25, Y+20	; 0x14
     9ce:	00 97       	sbiw	r24, 0x00	; 0
     9d0:	69 f7       	brne	.-38     	; 0x9ac <__stack+0xad>
     9d2:	14 c0       	rjmp	.+40     	; 0x9fc <__stack+0xfd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9d4:	6d 89       	ldd	r22, Y+21	; 0x15
     9d6:	7e 89       	ldd	r23, Y+22	; 0x16
     9d8:	8f 89       	ldd	r24, Y+23	; 0x17
     9da:	98 8d       	ldd	r25, Y+24	; 0x18
     9dc:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     9e0:	dc 01       	movw	r26, r24
     9e2:	cb 01       	movw	r24, r22
     9e4:	9c 8b       	std	Y+20, r25	; 0x14
     9e6:	8b 8b       	std	Y+19, r24	; 0x13
     9e8:	8b 89       	ldd	r24, Y+19	; 0x13
     9ea:	9c 89       	ldd	r25, Y+20	; 0x14
     9ec:	98 8b       	std	Y+16, r25	; 0x10
     9ee:	8f 87       	std	Y+15, r24	; 0x0f
     9f0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9f2:	98 89       	ldd	r25, Y+16	; 0x10
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <__stack+0xf5>
     9f8:	98 8b       	std	Y+16, r25	; 0x10
     9fa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(400);
		PORTD = (PORTD & 0x0C)|0xFF;
     9fc:	eb e2       	ldi	r30, 0x2B	; 43
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	eb e2       	ldi	r30, 0x2B	; 43
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	80 83       	st	Z, r24
		for(int i=0; i<1; i++){
		PORTD = (PORTD & 0x0C)|~(0x10<<i);
		_delay_ms(400);
		PORTD = (PORTD & 0x0C)|0xFF;
		}
		for(int i=0; i<2; i++){
     a0a:	8b ad       	ldd	r24, Y+59	; 0x3b
     a0c:	9c ad       	ldd	r25, Y+60	; 0x3c
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	9c af       	std	Y+60, r25	; 0x3c
     a12:	8b af       	std	Y+59, r24	; 0x3b
     a14:	8b ad       	ldd	r24, Y+59	; 0x3b
     a16:	9c ad       	ldd	r25, Y+60	; 0x3c
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	91 05       	cpc	r25, r1
     a1c:	0c f4       	brge	.+2      	; 0xa20 <__stack+0x121>
     a1e:	6a cf       	rjmp	.-300    	; 0x8f4 <LED_SHIFT+0x2aa>
		PORTD = (PORTD & 0x0C)|~(0x20>>i);
		_delay_ms(400);
		PORTD = (PORTD & 0x0C)|0xFF;
		}
		for(int i=0; i<6; i++){
     a20:	1a ae       	std	Y+58, r1	; 0x3a
     a22:	19 ae       	std	Y+57, r1	; 0x39
     a24:	83 c0       	rjmp	.+262    	; 0xb2c <__stack+0x22d>
		PORTC = ~(0x20 >> i);
     a26:	e8 e2       	ldi	r30, 0x28	; 40
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 e2       	ldi	r24, 0x20	; 32
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	09 ac       	ldd	r0, Y+57	; 0x39
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <__stack+0x137>
     a32:	95 95       	asr	r25
     a34:	87 95       	ror	r24
     a36:	0a 94       	dec	r0
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <__stack+0x133>
     a3a:	80 95       	com	r24
     a3c:	80 83       	st	Z, r24
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a8 ec       	ldi	r26, 0xC8	; 200
     a44:	b3 e4       	ldi	r27, 0x43	; 67
     a46:	8b 87       	std	Y+11, r24	; 0x0b
     a48:	9c 87       	std	Y+12, r25	; 0x0c
     a4a:	ad 87       	std	Y+13, r26	; 0x0d
     a4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a50:	7c 85       	ldd	r23, Y+12	; 0x0c
     a52:	8d 85       	ldd	r24, Y+13	; 0x0d
     a54:	9e 85       	ldd	r25, Y+14	; 0x0e
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	4a e7       	ldi	r20, 0x7A	; 122
     a5c:	55 e4       	ldi	r21, 0x45	; 69
     a5e:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     a62:	dc 01       	movw	r26, r24
     a64:	cb 01       	movw	r24, r22
     a66:	8f 83       	std	Y+7, r24	; 0x07
     a68:	98 87       	std	Y+8, r25	; 0x08
     a6a:	a9 87       	std	Y+9, r26	; 0x09
     a6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a6e:	6f 81       	ldd	r22, Y+7	; 0x07
     a70:	78 85       	ldd	r23, Y+8	; 0x08
     a72:	89 85       	ldd	r24, Y+9	; 0x09
     a74:	9a 85       	ldd	r25, Y+10	; 0x0a
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	40 e8       	ldi	r20, 0x80	; 128
     a7c:	5f e3       	ldi	r21, 0x3F	; 63
     a7e:	0e 94 23 08 	call	0x1046	; 0x1046 <__cmpsf2>
     a82:	88 23       	and	r24, r24
     a84:	2c f4       	brge	.+10     	; 0xa90 <__stack+0x191>
		__ticks = 1;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	9e 83       	std	Y+6, r25	; 0x06
     a8c:	8d 83       	std	Y+5, r24	; 0x05
     a8e:	3f c0       	rjmp	.+126    	; 0xb0e <__stack+0x20f>
	else if (__tmp > 65535)
     a90:	6f 81       	ldd	r22, Y+7	; 0x07
     a92:	78 85       	ldd	r23, Y+8	; 0x08
     a94:	89 85       	ldd	r24, Y+9	; 0x09
     a96:	9a 85       	ldd	r25, Y+10	; 0x0a
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	3f ef       	ldi	r19, 0xFF	; 255
     a9c:	4f e7       	ldi	r20, 0x7F	; 127
     a9e:	57 e4       	ldi	r21, 0x47	; 71
     aa0:	0e 94 a0 08 	call	0x1140	; 0x1140 <__gesf2>
     aa4:	18 16       	cp	r1, r24
     aa6:	4c f5       	brge	.+82     	; 0xafa <__stack+0x1fb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
     aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
     aac:	8d 85       	ldd	r24, Y+13	; 0x0d
     aae:	9e 85       	ldd	r25, Y+14	; 0x0e
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	40 e2       	ldi	r20, 0x20	; 32
     ab6:	51 e4       	ldi	r21, 0x41	; 65
     ab8:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     abc:	dc 01       	movw	r26, r24
     abe:	cb 01       	movw	r24, r22
     ac0:	bc 01       	movw	r22, r24
     ac2:	cd 01       	movw	r24, r26
     ac4:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     ac8:	dc 01       	movw	r26, r24
     aca:	cb 01       	movw	r24, r22
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
     ad0:	0f c0       	rjmp	.+30     	; 0xaf0 <__stack+0x1f1>
     ad2:	80 e9       	ldi	r24, 0x90	; 144
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	9c 83       	std	Y+4, r25	; 0x04
     ad8:	8b 83       	std	Y+3, r24	; 0x03
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	9c 81       	ldd	r25, Y+4	; 0x04
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <__stack+0x1df>
     ae2:	9c 83       	std	Y+4, r25	; 0x04
     ae4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ae6:	8d 81       	ldd	r24, Y+5	; 0x05
     ae8:	9e 81       	ldd	r25, Y+6	; 0x06
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	9e 83       	std	Y+6, r25	; 0x06
     aee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     af0:	8d 81       	ldd	r24, Y+5	; 0x05
     af2:	9e 81       	ldd	r25, Y+6	; 0x06
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	69 f7       	brne	.-38     	; 0xad2 <__stack+0x1d3>
     af8:	14 c0       	rjmp	.+40     	; 0xb22 <__stack+0x223>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     afa:	6f 81       	ldd	r22, Y+7	; 0x07
     afc:	78 85       	ldd	r23, Y+8	; 0x08
     afe:	89 85       	ldd	r24, Y+9	; 0x09
     b00:	9a 85       	ldd	r25, Y+10	; 0x0a
     b02:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     b06:	dc 01       	movw	r26, r24
     b08:	cb 01       	movw	r24, r22
     b0a:	9e 83       	std	Y+6, r25	; 0x06
     b0c:	8d 83       	std	Y+5, r24	; 0x05
     b0e:	8d 81       	ldd	r24, Y+5	; 0x05
     b10:	9e 81       	ldd	r25, Y+6	; 0x06
     b12:	9a 83       	std	Y+2, r25	; 0x02
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	9a 81       	ldd	r25, Y+2	; 0x02
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <__stack+0x21b>
     b1e:	9a 83       	std	Y+2, r25	; 0x02
     b20:	89 83       	std	Y+1, r24	; 0x01
		for(int i=0; i<2; i++){
		PORTD = (PORTD & 0x0C)|~(0x20>>i);
		_delay_ms(400);
		PORTD = (PORTD & 0x0C)|0xFF;
		}
		for(int i=0; i<6; i++){
     b22:	89 ad       	ldd	r24, Y+57	; 0x39
     b24:	9a ad       	ldd	r25, Y+58	; 0x3a
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	9a af       	std	Y+58, r25	; 0x3a
     b2a:	89 af       	std	Y+57, r24	; 0x39
     b2c:	89 ad       	ldd	r24, Y+57	; 0x39
     b2e:	9a ad       	ldd	r25, Y+58	; 0x3a
     b30:	86 30       	cpi	r24, 0x06	; 6
     b32:	91 05       	cpc	r25, r1
     b34:	0c f4       	brge	.+2      	; 0xb38 <__stack+0x239>
     b36:	77 cf       	rjmp	.-274    	; 0xa26 <__stack+0x127>
int LED_SHIFT(int a)
{
	PORTC = 0xFF;
	PORTD = (PORTD & 0xC0)|0xFF;
	for(int i=0; i<a; i++){
     b38:	de 01       	movw	r26, r28
     b3a:	af 5b       	subi	r26, 0xBF	; 191
     b3c:	bf 4f       	sbci	r27, 0xFF	; 255
     b3e:	fe 01       	movw	r30, r28
     b40:	ef 5b       	subi	r30, 0xBF	; 191
     b42:	ff 4f       	sbci	r31, 0xFF	; 255
     b44:	80 81       	ld	r24, Z
     b46:	91 81       	ldd	r25, Z+1	; 0x01
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	8d 93       	st	X+, r24
     b4c:	9c 93       	st	X, r25
     b4e:	fe 01       	movw	r30, r28
     b50:	ef 5b       	subi	r30, 0xBF	; 191
     b52:	ff 4f       	sbci	r31, 0xFF	; 255
     b54:	de 01       	movw	r26, r28
     b56:	ad 5b       	subi	r26, 0xBD	; 189
     b58:	bf 4f       	sbci	r27, 0xFF	; 255
     b5a:	20 81       	ld	r18, Z
     b5c:	31 81       	ldd	r19, Z+1	; 0x01
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	11 97       	sbiw	r26, 0x01	; 1
     b64:	28 17       	cp	r18, r24
     b66:	39 07       	cpc	r19, r25
     b68:	0c f4       	brge	.+2      	; 0xb6c <__stack+0x26d>
     b6a:	90 cd       	rjmp	.-1248   	; 0x68c <LED_SHIFT+0x42>
		for(int i=0; i<6; i++){
		PORTC = ~(0x20 >> i);
		_delay_ms(400);
		}
	}
}	
     b6c:	c7 5b       	subi	r28, 0xB7	; 183
     b6e:	df 4f       	sbci	r29, 0xFF	; 255
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <SEGMENT_UPCOUNTING>:
unsigned char seg[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67};
int SEGMENT_UPCOUNTING(int a)
{
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	66 97       	sbiw	r28, 0x16	; 22
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	9c 8b       	std	Y+20, r25	; 0x14
     b9a:	8b 8b       	std	Y+19, r24	; 0x13
	for(int i=0; i<a; i++){
     b9c:	1a 8a       	std	Y+18, r1	; 0x12
     b9e:	19 8a       	std	Y+17, r1	; 0x11
     ba0:	b8 c0       	rjmp	.+368    	; 0xd12 <SEGMENT_UPCOUNTING+0x192>
	int i = 0;
     ba2:	18 8a       	std	Y+16, r1	; 0x10
     ba4:	1f 86       	std	Y+15, r1	; 0x0f
	PORTD = (PORTD&0xC0)|(seg[i++%10]<<6);
     ba6:	0b e2       	ldi	r16, 0x2B	; 43
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	eb e2       	ldi	r30, 0x2B	; 43
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	40 7c       	andi	r20, 0xC0	; 192
     bb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb6:	98 89       	ldd	r25, Y+16	; 0x10
     bb8:	2a e0       	ldi	r18, 0x0A	; 10
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	b9 01       	movw	r22, r18
     bbe:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__divmodhi4>
     bc2:	fc 01       	movw	r30, r24
     bc4:	e2 5f       	subi	r30, 0xF2	; 242
     bc6:	fe 4f       	sbci	r31, 0xFE	; 254
     bc8:	80 81       	ld	r24, Z
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	00 24       	eor	r0, r0
     bd0:	96 95       	lsr	r25
     bd2:	87 95       	ror	r24
     bd4:	07 94       	ror	r0
     bd6:	96 95       	lsr	r25
     bd8:	87 95       	ror	r24
     bda:	07 94       	ror	r0
     bdc:	98 2f       	mov	r25, r24
     bde:	80 2d       	mov	r24, r0
     be0:	84 2b       	or	r24, r20
     be2:	f8 01       	movw	r30, r16
     be4:	80 83       	st	Z, r24
     be6:	8f 85       	ldd	r24, Y+15	; 0x0f
     be8:	98 89       	ldd	r25, Y+16	; 0x10
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	98 8b       	std	Y+16, r25	; 0x10
     bee:	8f 87       	std	Y+15, r24	; 0x0f
	PORTB = (PORTB & 0xCC)|seg[i++%10];
     bf0:	05 e2       	ldi	r16, 0x25	; 37
     bf2:	10 e0       	ldi	r17, 0x00	; 0
     bf4:	e5 e2       	ldi	r30, 0x25	; 37
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	48 2f       	mov	r20, r24
     bfc:	4c 7c       	andi	r20, 0xCC	; 204
     bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
     c00:	98 89       	ldd	r25, Y+16	; 0x10
     c02:	2a e0       	ldi	r18, 0x0A	; 10
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	b9 01       	movw	r22, r18
     c08:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__divmodhi4>
     c0c:	fc 01       	movw	r30, r24
     c0e:	e2 5f       	subi	r30, 0xF2	; 242
     c10:	fe 4f       	sbci	r31, 0xFE	; 254
     c12:	80 81       	ld	r24, Z
     c14:	84 2b       	or	r24, r20
     c16:	f8 01       	movw	r30, r16
     c18:	80 83       	st	Z, r24
     c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c1c:	98 89       	ldd	r25, Y+16	; 0x10
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	98 8b       	std	Y+16, r25	; 0x10
     c22:	8f 87       	std	Y+15, r24	; 0x0f
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a8 ec       	ldi	r26, 0xC8	; 200
     c2a:	b3 e4       	ldi	r27, 0x43	; 67
     c2c:	8b 87       	std	Y+11, r24	; 0x0b
     c2e:	9c 87       	std	Y+12, r25	; 0x0c
     c30:	ad 87       	std	Y+13, r26	; 0x0d
     c32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c34:	6b 85       	ldd	r22, Y+11	; 0x0b
     c36:	7c 85       	ldd	r23, Y+12	; 0x0c
     c38:	8d 85       	ldd	r24, Y+13	; 0x0d
     c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	4a e7       	ldi	r20, 0x7A	; 122
     c42:	55 e4       	ldi	r21, 0x45	; 69
     c44:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	8f 83       	std	Y+7, r24	; 0x07
     c4e:	98 87       	std	Y+8, r25	; 0x08
     c50:	a9 87       	std	Y+9, r26	; 0x09
     c52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c54:	6f 81       	ldd	r22, Y+7	; 0x07
     c56:	78 85       	ldd	r23, Y+8	; 0x08
     c58:	89 85       	ldd	r24, Y+9	; 0x09
     c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e8       	ldi	r20, 0x80	; 128
     c62:	5f e3       	ldi	r21, 0x3F	; 63
     c64:	0e 94 23 08 	call	0x1046	; 0x1046 <__cmpsf2>
     c68:	88 23       	and	r24, r24
     c6a:	2c f4       	brge	.+10     	; 0xc76 <SEGMENT_UPCOUNTING+0xf6>
		__ticks = 1;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	9e 83       	std	Y+6, r25	; 0x06
     c72:	8d 83       	std	Y+5, r24	; 0x05
     c74:	3f c0       	rjmp	.+126    	; 0xcf4 <SEGMENT_UPCOUNTING+0x174>
	else if (__tmp > 65535)
     c76:	6f 81       	ldd	r22, Y+7	; 0x07
     c78:	78 85       	ldd	r23, Y+8	; 0x08
     c7a:	89 85       	ldd	r24, Y+9	; 0x09
     c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	3f ef       	ldi	r19, 0xFF	; 255
     c82:	4f e7       	ldi	r20, 0x7F	; 127
     c84:	57 e4       	ldi	r21, 0x47	; 71
     c86:	0e 94 a0 08 	call	0x1140	; 0x1140 <__gesf2>
     c8a:	18 16       	cp	r1, r24
     c8c:	4c f5       	brge	.+82     	; 0xce0 <SEGMENT_UPCOUNTING+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c90:	7c 85       	ldd	r23, Y+12	; 0x0c
     c92:	8d 85       	ldd	r24, Y+13	; 0x0d
     c94:	9e 85       	ldd	r25, Y+14	; 0x0e
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e2       	ldi	r20, 0x20	; 32
     c9c:	51 e4       	ldi	r21, 0x41	; 65
     c9e:	0e 94 a4 08 	call	0x1148	; 0x1148 <__mulsf3>
     ca2:	dc 01       	movw	r26, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	bc 01       	movw	r22, r24
     ca8:	cd 01       	movw	r24, r26
     caa:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	9e 83       	std	Y+6, r25	; 0x06
     cb4:	8d 83       	std	Y+5, r24	; 0x05
     cb6:	0f c0       	rjmp	.+30     	; 0xcd6 <SEGMENT_UPCOUNTING+0x156>
     cb8:	80 e9       	ldi	r24, 0x90	; 144
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	9c 83       	std	Y+4, r25	; 0x04
     cbe:	8b 83       	std	Y+3, r24	; 0x03
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	f1 f7       	brne	.-4      	; 0xcc4 <SEGMENT_UPCOUNTING+0x144>
     cc8:	9c 83       	std	Y+4, r25	; 0x04
     cca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	9e 81       	ldd	r25, Y+6	; 0x06
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	9e 83       	std	Y+6, r25	; 0x06
     cd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd6:	8d 81       	ldd	r24, Y+5	; 0x05
     cd8:	9e 81       	ldd	r25, Y+6	; 0x06
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	69 f7       	brne	.-38     	; 0xcb8 <SEGMENT_UPCOUNTING+0x138>
     cde:	14 c0       	rjmp	.+40     	; 0xd08 <SEGMENT_UPCOUNTING+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce0:	6f 81       	ldd	r22, Y+7	; 0x07
     ce2:	78 85       	ldd	r23, Y+8	; 0x08
     ce4:	89 85       	ldd	r24, Y+9	; 0x09
     ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce8:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	9e 83       	std	Y+6, r25	; 0x06
     cf2:	8d 83       	std	Y+5, r24	; 0x05
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	9e 81       	ldd	r25, Y+6	; 0x06
     cf8:	9a 83       	std	Y+2, r25	; 0x02
     cfa:	89 83       	std	Y+1, r24	; 0x01
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	9a 81       	ldd	r25, Y+2	; 0x02
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	f1 f7       	brne	.-4      	; 0xd00 <SEGMENT_UPCOUNTING+0x180>
     d04:	9a 83       	std	Y+2, r25	; 0x02
     d06:	89 83       	std	Y+1, r24	; 0x01
unsigned char seg[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67};
int SEGMENT_UPCOUNTING(int a)
{
	for(int i=0; i<a; i++){
     d08:	89 89       	ldd	r24, Y+17	; 0x11
     d0a:	9a 89       	ldd	r25, Y+18	; 0x12
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	9a 8b       	std	Y+18, r25	; 0x12
     d10:	89 8b       	std	Y+17, r24	; 0x11
     d12:	29 89       	ldd	r18, Y+17	; 0x11
     d14:	3a 89       	ldd	r19, Y+18	; 0x12
     d16:	8b 89       	ldd	r24, Y+19	; 0x13
     d18:	9c 89       	ldd	r25, Y+20	; 0x14
     d1a:	28 17       	cp	r18, r24
     d1c:	39 07       	cpc	r19, r25
     d1e:	0c f4       	brge	.+2      	; 0xd22 <SEGMENT_UPCOUNTING+0x1a2>
     d20:	40 cf       	rjmp	.-384    	; 0xba2 <SEGMENT_UPCOUNTING+0x22>
	int i = 0;
	PORTD = (PORTD&0xC0)|(seg[i++%10]<<6);
	PORTB = (PORTB & 0xCC)|seg[i++%10];
	_delay_ms(400);
	}
}
     d22:	66 96       	adiw	r28, 0x16	; 22
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	08 95       	ret

00000d38 <BUZZER_ON_OFF>:
#define ON   1
#define OFF  0
int on_off = 0;

int BUZZER_ON_OFF(int a)
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <BUZZER_ON_OFF+0x6>
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <BUZZER_ON_OFF+0x8>
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	89 83       	std	Y+1, r24	; 0x01
   if(a>0){
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	18 16       	cp	r1, r24
     d4e:	19 06       	cpc	r1, r25
     d50:	74 f4       	brge	.+28     	; 0xd6e <BUZZER_ON_OFF+0x36>
	   while(1){
	      if(on_off == OFF){
     d52:	80 91 3a 01 	lds	r24, 0x013A
     d56:	90 91 3b 01 	lds	r25, 0x013B
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	29 f4       	brne	.+10     	; 0xd68 <BUZZER_ON_OFF+0x30>
	         play(1000);
     d5e:	88 ee       	ldi	r24, 0xE8	; 232
     d60:	93 e0       	ldi	r25, 0x03	; 3
     d62:	0e 94 be 06 	call	0xd7c	; 0xd7c <play>
     d66:	f5 cf       	rjmp	.-22     	; 0xd52 <BUZZER_ON_OFF+0x1a>
	      }
	      else{
	         stop();
     d68:	0e 94 de 06 	call	0xdbc	; 0xdbc <stop>
     d6c:	f2 cf       	rjmp	.-28     	; 0xd52 <BUZZER_ON_OFF+0x1a>
	      }
	   }
	}
}
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <play>:

void play(unsigned int y){
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <play+0x6>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01
   TCCR1A |=  0X40; //(1 << COM1A0); // 0x40
     d8a:	a0 e8       	ldi	r26, 0x80	; 128
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e0 e8       	ldi	r30, 0x80	; 128
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	80 64       	ori	r24, 0x40	; 64
     d96:	8c 93       	st	X, r24
   TCCR1B |=  0x1A; //(1 << WGM13)| (1 << WGM12)| (1 << CS11); // 0x1A
     d98:	a1 e8       	ldi	r26, 0x81	; 129
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e1 e8       	ldi	r30, 0x81	; 129
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8a 61       	ori	r24, 0x1A	; 26
     da4:	8c 93       	st	X, r24
   ICR1 = y;
     da6:	e6 e8       	ldi	r30, 0x86	; 134
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	91 83       	std	Z+1, r25	; 0x01
     db0:	80 83       	st	Z, r24
}
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <stop>:

void stop(void){
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
   TCCR1A = 0x00;
     dc4:	e0 e8       	ldi	r30, 0x80	; 128
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	10 82       	st	Z, r1
   TCCR1B = 0x00;
     dca:	e1 e8       	ldi	r30, 0x81	; 129
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	10 82       	st	Z, r1
   TCNT1 = 0;
     dd0:	e4 e8       	ldi	r30, 0x84	; 132
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	11 82       	std	Z+1, r1	; 0x01
     dd6:	10 82       	st	Z, r1
   ICR1 = 0;
     dd8:	e6 e8       	ldi	r30, 0x86	; 134
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	11 82       	std	Z+1, r1	; 0x01
     dde:	10 82       	st	Z, r1

   DDRB = ~0x02;
     de0:	e4 e2       	ldi	r30, 0x24	; 36
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	8d ef       	ldi	r24, 0xFD	; 253
     de6:	80 83       	st	Z, r24
}
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <hex_command>:
#define   STX  					    0x02
#define   ETX   					0x03


void hex_command(unsigned char cd)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	89 83       	std	Y+1, r24	; 0x01
	if(cd == LEDALLONOFF){
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	39 f4       	brne	.+14     	; 0xe0e <hex_command+0x20>
	LED_ALL_ON_OFF(count);
     e00:	80 91 38 01 	lds	r24, 0x0138
     e04:	90 91 39 01 	lds	r25, 0x0139
     e08:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LED_ALL_ON_OFF>
     e0c:	34 c0       	rjmp	.+104    	; 0xe76 <hex_command+0x88>
	}else if(cd == LEDANTERNATINGONOFF){
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	39 f4       	brne	.+14     	; 0xe22 <hex_command+0x34>
	LED_ANTERNATING_ON_OFF(count);
     e14:	80 91 38 01 	lds	r24, 0x0138
     e18:	90 91 39 01 	lds	r25, 0x0139
     e1c:	0e 94 06 02 	call	0x40c	; 0x40c <LED_ANTERNATING_ON_OFF>
     e20:	2a c0       	rjmp	.+84     	; 0xe76 <hex_command+0x88>
	}else if(cd == LEDSHIFT){
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	84 30       	cpi	r24, 0x04	; 4
     e26:	39 f4       	brne	.+14     	; 0xe36 <hex_command+0x48>
	LED_SHIFT(count);
     e28:	80 91 38 01 	lds	r24, 0x0138
     e2c:	90 91 39 01 	lds	r25, 0x0139
     e30:	0e 94 25 03 	call	0x64a	; 0x64a <LED_SHIFT>
     e34:	20 c0       	rjmp	.+64     	; 0xe76 <hex_command+0x88>
	}else if(cd == SEGMENTUPCOUNTING){
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	88 30       	cpi	r24, 0x08	; 8
     e3a:	39 f4       	brne	.+14     	; 0xe4a <hex_command+0x5c>
	SEGMENT_UPCOUNTING(count);
     e3c:	80 91 38 01 	lds	r24, 0x0138
     e40:	90 91 39 01 	lds	r25, 0x0139
     e44:	0e 94 c0 05 	call	0xb80	; 0xb80 <SEGMENT_UPCOUNTING>
     e48:	16 c0       	rjmp	.+44     	; 0xe76 <hex_command+0x88>
	}else if(cd == BUZZER){
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	80 31       	cpi	r24, 0x10	; 16
     e4e:	39 f4       	brne	.+14     	; 0xe5e <hex_command+0x70>
	BUZZER_ON_OFF(count);
     e50:	80 91 38 01 	lds	r24, 0x0138
     e54:	90 91 39 01 	lds	r25, 0x0139
     e58:	0e 94 9c 06 	call	0xd38	; 0xd38 <BUZZER_ON_OFF>
     e5c:	0c c0       	rjmp	.+24     	; 0xe76 <hex_command+0x88>
	}else{
	Printf("Invalid Command\n");
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <hex_command+0x72>
     e60:	ed b7       	in	r30, 0x3d	; 61
     e62:	fe b7       	in	r31, 0x3e	; 62
     e64:	31 96       	adiw	r30, 0x01	; 1
     e66:	88 e1       	ldi	r24, 0x18	; 24
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	91 83       	std	Z+1, r25	; 0x01
     e6c:	80 83       	st	Z, r24
     e6e:	0e 94 97 00 	call	0x12e	; 0x12e <Printf>
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
	}
}
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <__vector_18>:

ISR(USART_RX_vect){
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	2f 93       	push	r18
     e8a:	3f 93       	push	r19
     e8c:	4f 93       	push	r20
     e8e:	5f 93       	push	r21
     e90:	6f 93       	push	r22
     e92:	7f 93       	push	r23
     e94:	8f 93       	push	r24
     e96:	9f 93       	push	r25
     e98:	af 93       	push	r26
     e9a:	bf 93       	push	r27
     e9c:	ef 93       	push	r30
     e9e:	ff 93       	push	r31
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	0f 92       	push	r0
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
	unsigned char _usart_rcv = 0;
     eaa:	19 82       	std	Y+1, r1	; 0x01
         
	_usart_rcv = UDR0;
     eac:	e6 ec       	ldi	r30, 0xC6	; 198
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	89 83       	std	Y+1, r24	; 0x01

	if(decode == 0 && _usart_rcv == STX){
     eb4:	80 91 35 01 	lds	r24, 0x0135
     eb8:	90 91 36 01 	lds	r25, 0x0136
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	51 f4       	brne	.+20     	; 0xed4 <__vector_18+0x56>
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	82 30       	cpi	r24, 0x02	; 2
     ec4:	39 f4       	brne	.+14     	; 0xed4 <__vector_18+0x56>
	decode =1;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	90 93 36 01 	sts	0x0136, r25
     ece:	80 93 35 01 	sts	0x0135, r24
     ed2:	44 c0       	rjmp	.+136    	; 0xf5c <__vector_18+0xde>
	}else if(decode==1){
     ed4:	80 91 35 01 	lds	r24, 0x0135
     ed8:	90 91 36 01 	lds	r25, 0x0136
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	91 05       	cpc	r25, r1
     ee0:	51 f4       	brne	.+20     	; 0xef6 <__vector_18+0x78>
	_command = _usart_rcv;
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	80 93 37 01 	sts	0x0137, r24
	decode = 2;
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	90 93 36 01 	sts	0x0136, r25
     ef0:	80 93 35 01 	sts	0x0135, r24
     ef4:	33 c0       	rjmp	.+102    	; 0xf5c <__vector_18+0xde>
	}else if(decode==2){
     ef6:	80 91 35 01 	lds	r24, 0x0135
     efa:	90 91 36 01 	lds	r25, 0x0136
     efe:	82 30       	cpi	r24, 0x02	; 2
     f00:	91 05       	cpc	r25, r1
     f02:	71 f4       	brne	.+28     	; 0xf20 <__vector_18+0xa2>
	count = _usart_rcv;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	90 93 39 01 	sts	0x0139, r25
     f0e:	80 93 38 01 	sts	0x0138, r24
	decode = 3;
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	90 93 36 01 	sts	0x0136, r25
     f1a:	80 93 35 01 	sts	0x0135, r24
     f1e:	1e c0       	rjmp	.+60     	; 0xf5c <__vector_18+0xde>
	}else if(decode==3){
     f20:	80 91 35 01 	lds	r24, 0x0135
     f24:	90 91 36 01 	lds	r25, 0x0136
     f28:	83 30       	cpi	r24, 0x03	; 3
     f2a:	91 05       	cpc	r25, r1
     f2c:	b9 f4       	brne	.+46     	; 0xf5c <__vector_18+0xde>
		if(_usart_rcv == ETX){
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	83 30       	cpi	r24, 0x03	; 3
     f32:	21 f4       	brne	.+8      	; 0xf3c <__vector_18+0xbe>
		sint_flag = 1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 3c 01 	sts	0x013C, r24
     f3a:	0c c0       	rjmp	.+24     	; 0xf54 <__vector_18+0xd6>
		}else{
		Printf("RX error\n");
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <__vector_18+0xc0>
     f3e:	ed b7       	in	r30, 0x3d	; 61
     f40:	fe b7       	in	r31, 0x3e	; 62
     f42:	31 96       	adiw	r30, 0x01	; 1
     f44:	89 e2       	ldi	r24, 0x29	; 41
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	91 83       	std	Z+1, r25	; 0x01
     f4a:	80 83       	st	Z, r24
     f4c:	0e 94 97 00 	call	0x12e	; 0x12e <Printf>
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
		}
	decode = 0;
     f54:	10 92 36 01 	sts	0x0136, r1
     f58:	10 92 35 01 	sts	0x0135, r1
	}
	sei();
     f5c:	78 94       	sei
}
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	ff 91       	pop	r31
     f66:	ef 91       	pop	r30
     f68:	bf 91       	pop	r27
     f6a:	af 91       	pop	r26
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	7f 91       	pop	r23
     f72:	6f 91       	pop	r22
     f74:	5f 91       	pop	r21
     f76:	4f 91       	pop	r20
     f78:	3f 91       	pop	r19
     f7a:	2f 91       	pop	r18
     f7c:	0f 90       	pop	r0
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	0f 90       	pop	r0
     f82:	1f 90       	pop	r1
     f84:	18 95       	reti

00000f86 <main>:


int main()
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0xF0;
     f8e:	ea e2       	ldi	r30, 0x2A	; 42
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 ef       	ldi	r24, 0xF0	; 240
     f94:	80 83       	st	Z, r24
	DDRC = 0xFF;
     f96:	e7 e2       	ldi	r30, 0x27	; 39
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	80 83       	st	Z, r24
	DDRB = 0xCC;
     f9e:	e4 e2       	ldi	r30, 0x24	; 36
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	8c ec       	ldi	r24, 0xCC	; 204
     fa4:	80 83       	st	Z, r24
	cli();
     fa6:	f8 94       	cli
	UBRR0H = (unsigned char) (BAUD_9600 >>8);
     fa8:	e5 ec       	ldi	r30, 0xC5	; 197
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	10 82       	st	Z, r1
	UBRR0L = (unsigned char) BAUD_9600;
     fae:	e4 ec       	ldi	r30, 0xC4	; 196
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	87 e6       	ldi	r24, 0x67	; 103
     fb4:	80 83       	st	Z, r24
	UCSR0A = 0X00;
     fb6:	e0 ec       	ldi	r30, 0xC0	; 192
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	10 82       	st	Z, r1
	UCSR0B = (1<< TXEN0)|  (1<< RXEN0);   
     fbc:	e1 ec       	ldi	r30, 0xC1	; 193
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	88 e1       	ldi	r24, 0x18	; 24
     fc2:	80 83       	st	Z, r24
	UCSR0B |=   (1<< RXCIE0);
     fc4:	a1 ec       	ldi	r26, 0xC1	; 193
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e1 ec       	ldi	r30, 0xC1	; 193
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 68       	ori	r24, 0x80	; 128
     fd0:	8c 93       	st	X, r24
	UCSR0C = (1<< UCSZ01) | (1<< UCSZ00);   
     fd2:	e2 ec       	ldi	r30, 0xC2	; 194
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	86 e0       	ldi	r24, 0x06	; 6
     fd8:	80 83       	st	Z, r24

	sei();
     fda:	78 94       	sei
	while(1){
		if(sint_flag){    
     fdc:	80 91 3c 01 	lds	r24, 0x013C
     fe0:	88 23       	and	r24, r24
     fe2:	e1 f3       	breq	.-8      	; 0xfdc <main+0x56>
		hex_command(_command);
     fe4:	80 91 37 01 	lds	r24, 0x0137
     fe8:	0e 94 f7 06 	call	0xdee	; 0xdee <hex_command>
		sint_flag = 0;
     fec:	10 92 3c 01 	sts	0x013C, r1
		_command = 0; 
     ff0:	10 92 37 01 	sts	0x0137, r1
     ff4:	f3 cf       	rjmp	.-26     	; 0xfdc <main+0x56>

00000ff6 <exit>:
     ff6:	f8 94       	cli
     ff8:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <_exit>

00000ffc <strlen>:
     ffc:	fc 01       	movw	r30, r24
     ffe:	01 90       	ld	r0, Z+
    1000:	00 20       	and	r0, r0
    1002:	e9 f7       	brne	.-6      	; 0xffe <strlen+0x2>
    1004:	80 95       	com	r24
    1006:	90 95       	com	r25
    1008:	8e 0f       	add	r24, r30
    100a:	9f 1f       	adc	r25, r31
    100c:	08 95       	ret

0000100e <vsprintf>:
    100e:	ae e0       	ldi	r26, 0x0E	; 14
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ed e0       	ldi	r30, 0x0D	; 13
    1014:	f8 e0       	ldi	r31, 0x08	; 8
    1016:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__prologue_saves__+0x1c>
    101a:	8c 01       	movw	r16, r24
    101c:	86 e0       	ldi	r24, 0x06	; 6
    101e:	8c 83       	std	Y+4, r24	; 0x04
    1020:	1a 83       	std	Y+2, r17	; 0x02
    1022:	09 83       	std	Y+1, r16	; 0x01
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	9f e7       	ldi	r25, 0x7F	; 127
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	8d 83       	std	Y+5, r24	; 0x05
    102c:	ce 01       	movw	r24, r28
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	0e 94 07 09 	call	0x120e	; 0x120e <vfprintf>
    1034:	ef 81       	ldd	r30, Y+7	; 0x07
    1036:	f8 85       	ldd	r31, Y+8	; 0x08
    1038:	e0 0f       	add	r30, r16
    103a:	f1 1f       	adc	r31, r17
    103c:	10 82       	st	Z, r1
    103e:	2e 96       	adiw	r28, 0x0e	; 14
    1040:	e4 e0       	ldi	r30, 0x04	; 4
    1042:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__epilogue_restores__+0x1c>

00001046 <__cmpsf2>:
    1046:	2f d0       	rcall	.+94     	; 0x10a6 <__fp_cmp>
    1048:	08 f4       	brcc	.+2      	; 0x104c <__cmpsf2+0x6>
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	08 95       	ret

0000104e <__fixunssfsi>:
    104e:	57 d0       	rcall	.+174    	; 0x10fe <__fp_splitA>
    1050:	88 f0       	brcs	.+34     	; 0x1074 <__fixunssfsi+0x26>
    1052:	9f 57       	subi	r25, 0x7F	; 127
    1054:	90 f0       	brcs	.+36     	; 0x107a <__fixunssfsi+0x2c>
    1056:	b9 2f       	mov	r27, r25
    1058:	99 27       	eor	r25, r25
    105a:	b7 51       	subi	r27, 0x17	; 23
    105c:	a0 f0       	brcs	.+40     	; 0x1086 <__fixunssfsi+0x38>
    105e:	d1 f0       	breq	.+52     	; 0x1094 <__fixunssfsi+0x46>
    1060:	66 0f       	add	r22, r22
    1062:	77 1f       	adc	r23, r23
    1064:	88 1f       	adc	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	1a f0       	brmi	.+6      	; 0x1070 <__fixunssfsi+0x22>
    106a:	ba 95       	dec	r27
    106c:	c9 f7       	brne	.-14     	; 0x1060 <__fixunssfsi+0x12>
    106e:	12 c0       	rjmp	.+36     	; 0x1094 <__fixunssfsi+0x46>
    1070:	b1 30       	cpi	r27, 0x01	; 1
    1072:	81 f0       	breq	.+32     	; 0x1094 <__fixunssfsi+0x46>
    1074:	5e d0       	rcall	.+188    	; 0x1132 <__fp_zero>
    1076:	b1 e0       	ldi	r27, 0x01	; 1
    1078:	08 95       	ret
    107a:	5b c0       	rjmp	.+182    	; 0x1132 <__fp_zero>
    107c:	67 2f       	mov	r22, r23
    107e:	78 2f       	mov	r23, r24
    1080:	88 27       	eor	r24, r24
    1082:	b8 5f       	subi	r27, 0xF8	; 248
    1084:	39 f0       	breq	.+14     	; 0x1094 <__fixunssfsi+0x46>
    1086:	b9 3f       	cpi	r27, 0xF9	; 249
    1088:	cc f3       	brlt	.-14     	; 0x107c <__fixunssfsi+0x2e>
    108a:	86 95       	lsr	r24
    108c:	77 95       	ror	r23
    108e:	67 95       	ror	r22
    1090:	b3 95       	inc	r27
    1092:	d9 f7       	brne	.-10     	; 0x108a <__fixunssfsi+0x3c>
    1094:	3e f4       	brtc	.+14     	; 0x10a4 <__fixunssfsi+0x56>
    1096:	90 95       	com	r25
    1098:	80 95       	com	r24
    109a:	70 95       	com	r23
    109c:	61 95       	neg	r22
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	8f 4f       	sbci	r24, 0xFF	; 255
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	08 95       	ret

000010a6 <__fp_cmp>:
    10a6:	99 0f       	add	r25, r25
    10a8:	00 08       	sbc	r0, r0
    10aa:	55 0f       	add	r21, r21
    10ac:	aa 0b       	sbc	r26, r26
    10ae:	e0 e8       	ldi	r30, 0x80	; 128
    10b0:	fe ef       	ldi	r31, 0xFE	; 254
    10b2:	16 16       	cp	r1, r22
    10b4:	17 06       	cpc	r1, r23
    10b6:	e8 07       	cpc	r30, r24
    10b8:	f9 07       	cpc	r31, r25
    10ba:	c0 f0       	brcs	.+48     	; 0x10ec <__fp_cmp+0x46>
    10bc:	12 16       	cp	r1, r18
    10be:	13 06       	cpc	r1, r19
    10c0:	e4 07       	cpc	r30, r20
    10c2:	f5 07       	cpc	r31, r21
    10c4:	98 f0       	brcs	.+38     	; 0x10ec <__fp_cmp+0x46>
    10c6:	62 1b       	sub	r22, r18
    10c8:	73 0b       	sbc	r23, r19
    10ca:	84 0b       	sbc	r24, r20
    10cc:	95 0b       	sbc	r25, r21
    10ce:	39 f4       	brne	.+14     	; 0x10de <__fp_cmp+0x38>
    10d0:	0a 26       	eor	r0, r26
    10d2:	61 f0       	breq	.+24     	; 0x10ec <__fp_cmp+0x46>
    10d4:	23 2b       	or	r18, r19
    10d6:	24 2b       	or	r18, r20
    10d8:	25 2b       	or	r18, r21
    10da:	21 f4       	brne	.+8      	; 0x10e4 <__fp_cmp+0x3e>
    10dc:	08 95       	ret
    10de:	0a 26       	eor	r0, r26
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <__fp_cmp+0x3e>
    10e2:	a1 40       	sbci	r26, 0x01	; 1
    10e4:	a6 95       	lsr	r26
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	81 1d       	adc	r24, r1
    10ea:	81 1d       	adc	r24, r1
    10ec:	08 95       	ret

000010ee <__fp_split3>:
    10ee:	57 fd       	sbrc	r21, 7
    10f0:	90 58       	subi	r25, 0x80	; 128
    10f2:	44 0f       	add	r20, r20
    10f4:	55 1f       	adc	r21, r21
    10f6:	59 f0       	breq	.+22     	; 0x110e <__fp_splitA+0x10>
    10f8:	5f 3f       	cpi	r21, 0xFF	; 255
    10fa:	71 f0       	breq	.+28     	; 0x1118 <__fp_splitA+0x1a>
    10fc:	47 95       	ror	r20

000010fe <__fp_splitA>:
    10fe:	88 0f       	add	r24, r24
    1100:	97 fb       	bst	r25, 7
    1102:	99 1f       	adc	r25, r25
    1104:	61 f0       	breq	.+24     	; 0x111e <__fp_splitA+0x20>
    1106:	9f 3f       	cpi	r25, 0xFF	; 255
    1108:	79 f0       	breq	.+30     	; 0x1128 <__fp_splitA+0x2a>
    110a:	87 95       	ror	r24
    110c:	08 95       	ret
    110e:	12 16       	cp	r1, r18
    1110:	13 06       	cpc	r1, r19
    1112:	14 06       	cpc	r1, r20
    1114:	55 1f       	adc	r21, r21
    1116:	f2 cf       	rjmp	.-28     	; 0x10fc <__fp_split3+0xe>
    1118:	46 95       	lsr	r20
    111a:	f1 df       	rcall	.-30     	; 0x10fe <__fp_splitA>
    111c:	08 c0       	rjmp	.+16     	; 0x112e <__fp_splitA+0x30>
    111e:	16 16       	cp	r1, r22
    1120:	17 06       	cpc	r1, r23
    1122:	18 06       	cpc	r1, r24
    1124:	99 1f       	adc	r25, r25
    1126:	f1 cf       	rjmp	.-30     	; 0x110a <__fp_splitA+0xc>
    1128:	86 95       	lsr	r24
    112a:	71 05       	cpc	r23, r1
    112c:	61 05       	cpc	r22, r1
    112e:	08 94       	sec
    1130:	08 95       	ret

00001132 <__fp_zero>:
    1132:	e8 94       	clt

00001134 <__fp_szero>:
    1134:	bb 27       	eor	r27, r27
    1136:	66 27       	eor	r22, r22
    1138:	77 27       	eor	r23, r23
    113a:	cb 01       	movw	r24, r22
    113c:	97 f9       	bld	r25, 7
    113e:	08 95       	ret

00001140 <__gesf2>:
    1140:	b2 df       	rcall	.-156    	; 0x10a6 <__fp_cmp>
    1142:	08 f4       	brcc	.+2      	; 0x1146 <__gesf2+0x6>
    1144:	8f ef       	ldi	r24, 0xFF	; 255
    1146:	08 95       	ret

00001148 <__mulsf3>:
    1148:	0b d0       	rcall	.+22     	; 0x1160 <__mulsf3x>
    114a:	f5 c2       	rjmp	.+1514   	; 0x1736 <__fp_round>
    114c:	e6 d2       	rcall	.+1484   	; 0x171a <__fp_pscA>
    114e:	28 f0       	brcs	.+10     	; 0x115a <__mulsf3+0x12>
    1150:	eb d2       	rcall	.+1494   	; 0x1728 <__fp_pscB>
    1152:	18 f0       	brcs	.+6      	; 0x115a <__mulsf3+0x12>
    1154:	95 23       	and	r25, r21
    1156:	09 f0       	breq	.+2      	; 0x115a <__mulsf3+0x12>
    1158:	d7 c2       	rjmp	.+1454   	; 0x1708 <__fp_inf>
    115a:	dc c2       	rjmp	.+1464   	; 0x1714 <__fp_nan>
    115c:	11 24       	eor	r1, r1
    115e:	ea cf       	rjmp	.-44     	; 0x1134 <__fp_szero>

00001160 <__mulsf3x>:
    1160:	c6 df       	rcall	.-116    	; 0x10ee <__fp_split3>
    1162:	a0 f3       	brcs	.-24     	; 0x114c <__mulsf3+0x4>

00001164 <__mulsf3_pse>:
    1164:	95 9f       	mul	r25, r21
    1166:	d1 f3       	breq	.-12     	; 0x115c <__mulsf3+0x14>
    1168:	95 0f       	add	r25, r21
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	55 1f       	adc	r21, r21
    116e:	62 9f       	mul	r22, r18
    1170:	f0 01       	movw	r30, r0
    1172:	72 9f       	mul	r23, r18
    1174:	bb 27       	eor	r27, r27
    1176:	f0 0d       	add	r31, r0
    1178:	b1 1d       	adc	r27, r1
    117a:	63 9f       	mul	r22, r19
    117c:	aa 27       	eor	r26, r26
    117e:	f0 0d       	add	r31, r0
    1180:	b1 1d       	adc	r27, r1
    1182:	aa 1f       	adc	r26, r26
    1184:	64 9f       	mul	r22, r20
    1186:	66 27       	eor	r22, r22
    1188:	b0 0d       	add	r27, r0
    118a:	a1 1d       	adc	r26, r1
    118c:	66 1f       	adc	r22, r22
    118e:	82 9f       	mul	r24, r18
    1190:	22 27       	eor	r18, r18
    1192:	b0 0d       	add	r27, r0
    1194:	a1 1d       	adc	r26, r1
    1196:	62 1f       	adc	r22, r18
    1198:	73 9f       	mul	r23, r19
    119a:	b0 0d       	add	r27, r0
    119c:	a1 1d       	adc	r26, r1
    119e:	62 1f       	adc	r22, r18
    11a0:	83 9f       	mul	r24, r19
    11a2:	a0 0d       	add	r26, r0
    11a4:	61 1d       	adc	r22, r1
    11a6:	22 1f       	adc	r18, r18
    11a8:	74 9f       	mul	r23, r20
    11aa:	33 27       	eor	r19, r19
    11ac:	a0 0d       	add	r26, r0
    11ae:	61 1d       	adc	r22, r1
    11b0:	23 1f       	adc	r18, r19
    11b2:	84 9f       	mul	r24, r20
    11b4:	60 0d       	add	r22, r0
    11b6:	21 1d       	adc	r18, r1
    11b8:	82 2f       	mov	r24, r18
    11ba:	76 2f       	mov	r23, r22
    11bc:	6a 2f       	mov	r22, r26
    11be:	11 24       	eor	r1, r1
    11c0:	9f 57       	subi	r25, 0x7F	; 127
    11c2:	50 40       	sbci	r21, 0x00	; 0
    11c4:	8a f0       	brmi	.+34     	; 0x11e8 <__mulsf3_pse+0x84>
    11c6:	e1 f0       	breq	.+56     	; 0x1200 <__mulsf3_pse+0x9c>
    11c8:	88 23       	and	r24, r24
    11ca:	4a f0       	brmi	.+18     	; 0x11de <__mulsf3_pse+0x7a>
    11cc:	ee 0f       	add	r30, r30
    11ce:	ff 1f       	adc	r31, r31
    11d0:	bb 1f       	adc	r27, r27
    11d2:	66 1f       	adc	r22, r22
    11d4:	77 1f       	adc	r23, r23
    11d6:	88 1f       	adc	r24, r24
    11d8:	91 50       	subi	r25, 0x01	; 1
    11da:	50 40       	sbci	r21, 0x00	; 0
    11dc:	a9 f7       	brne	.-22     	; 0x11c8 <__mulsf3_pse+0x64>
    11de:	9e 3f       	cpi	r25, 0xFE	; 254
    11e0:	51 05       	cpc	r21, r1
    11e2:	70 f0       	brcs	.+28     	; 0x1200 <__mulsf3_pse+0x9c>
    11e4:	91 c2       	rjmp	.+1314   	; 0x1708 <__fp_inf>
    11e6:	a6 cf       	rjmp	.-180    	; 0x1134 <__fp_szero>
    11e8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ea:	ec f3       	brlt	.-6      	; 0x11e6 <__mulsf3_pse+0x82>
    11ec:	98 3e       	cpi	r25, 0xE8	; 232
    11ee:	dc f3       	brlt	.-10     	; 0x11e6 <__mulsf3_pse+0x82>
    11f0:	86 95       	lsr	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	b7 95       	ror	r27
    11f8:	f7 95       	ror	r31
    11fa:	e7 95       	ror	r30
    11fc:	9f 5f       	subi	r25, 0xFF	; 255
    11fe:	c1 f7       	brne	.-16     	; 0x11f0 <__mulsf3_pse+0x8c>
    1200:	fe 2b       	or	r31, r30
    1202:	88 0f       	add	r24, r24
    1204:	91 1d       	adc	r25, r1
    1206:	96 95       	lsr	r25
    1208:	87 95       	ror	r24
    120a:	97 f9       	bld	r25, 7
    120c:	08 95       	ret

0000120e <vfprintf>:
    120e:	ab e0       	ldi	r26, 0x0B	; 11
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ed e0       	ldi	r30, 0x0D	; 13
    1214:	f9 e0       	ldi	r31, 0x09	; 9
    1216:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__prologue_saves__>
    121a:	3c 01       	movw	r6, r24
    121c:	2b 01       	movw	r4, r22
    121e:	5a 01       	movw	r10, r20
    1220:	fc 01       	movw	r30, r24
    1222:	17 82       	std	Z+7, r1	; 0x07
    1224:	16 82       	std	Z+6, r1	; 0x06
    1226:	83 81       	ldd	r24, Z+3	; 0x03
    1228:	81 fd       	sbrc	r24, 1
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <vfprintf+0x24>
    122c:	6f ef       	ldi	r22, 0xFF	; 255
    122e:	7f ef       	ldi	r23, 0xFF	; 255
    1230:	c6 c1       	rjmp	.+908    	; 0x15be <vfprintf+0x3b0>
    1232:	9a e0       	ldi	r25, 0x0A	; 10
    1234:	89 2e       	mov	r8, r25
    1236:	1e 01       	movw	r2, r28
    1238:	08 94       	sec
    123a:	21 1c       	adc	r2, r1
    123c:	31 1c       	adc	r3, r1
    123e:	f3 01       	movw	r30, r6
    1240:	23 81       	ldd	r18, Z+3	; 0x03
    1242:	f2 01       	movw	r30, r4
    1244:	23 fd       	sbrc	r18, 3
    1246:	85 91       	lpm	r24, Z+
    1248:	23 ff       	sbrs	r18, 3
    124a:	81 91       	ld	r24, Z+
    124c:	2f 01       	movw	r4, r30
    124e:	88 23       	and	r24, r24
    1250:	09 f4       	brne	.+2      	; 0x1254 <vfprintf+0x46>
    1252:	b2 c1       	rjmp	.+868    	; 0x15b8 <vfprintf+0x3aa>
    1254:	85 32       	cpi	r24, 0x25	; 37
    1256:	39 f4       	brne	.+14     	; 0x1266 <vfprintf+0x58>
    1258:	23 fd       	sbrc	r18, 3
    125a:	85 91       	lpm	r24, Z+
    125c:	23 ff       	sbrs	r18, 3
    125e:	81 91       	ld	r24, Z+
    1260:	2f 01       	movw	r4, r30
    1262:	85 32       	cpi	r24, 0x25	; 37
    1264:	29 f4       	brne	.+10     	; 0x1270 <vfprintf+0x62>
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	b3 01       	movw	r22, r6
    126a:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <fputc>
    126e:	e7 cf       	rjmp	.-50     	; 0x123e <vfprintf+0x30>
    1270:	98 2f       	mov	r25, r24
    1272:	ff 24       	eor	r15, r15
    1274:	ee 24       	eor	r14, r14
    1276:	99 24       	eor	r9, r9
    1278:	ff e1       	ldi	r31, 0x1F	; 31
    127a:	ff 15       	cp	r31, r15
    127c:	d0 f0       	brcs	.+52     	; 0x12b2 <vfprintf+0xa4>
    127e:	9b 32       	cpi	r25, 0x2B	; 43
    1280:	69 f0       	breq	.+26     	; 0x129c <vfprintf+0x8e>
    1282:	9c 32       	cpi	r25, 0x2C	; 44
    1284:	28 f4       	brcc	.+10     	; 0x1290 <vfprintf+0x82>
    1286:	90 32       	cpi	r25, 0x20	; 32
    1288:	59 f0       	breq	.+22     	; 0x12a0 <vfprintf+0x92>
    128a:	93 32       	cpi	r25, 0x23	; 35
    128c:	91 f4       	brne	.+36     	; 0x12b2 <vfprintf+0xa4>
    128e:	0e c0       	rjmp	.+28     	; 0x12ac <vfprintf+0x9e>
    1290:	9d 32       	cpi	r25, 0x2D	; 45
    1292:	49 f0       	breq	.+18     	; 0x12a6 <vfprintf+0x98>
    1294:	90 33       	cpi	r25, 0x30	; 48
    1296:	69 f4       	brne	.+26     	; 0x12b2 <vfprintf+0xa4>
    1298:	41 e0       	ldi	r20, 0x01	; 1
    129a:	24 c0       	rjmp	.+72     	; 0x12e4 <vfprintf+0xd6>
    129c:	52 e0       	ldi	r21, 0x02	; 2
    129e:	f5 2a       	or	r15, r21
    12a0:	84 e0       	ldi	r24, 0x04	; 4
    12a2:	f8 2a       	or	r15, r24
    12a4:	28 c0       	rjmp	.+80     	; 0x12f6 <vfprintf+0xe8>
    12a6:	98 e0       	ldi	r25, 0x08	; 8
    12a8:	f9 2a       	or	r15, r25
    12aa:	25 c0       	rjmp	.+74     	; 0x12f6 <vfprintf+0xe8>
    12ac:	e0 e1       	ldi	r30, 0x10	; 16
    12ae:	fe 2a       	or	r15, r30
    12b0:	22 c0       	rjmp	.+68     	; 0x12f6 <vfprintf+0xe8>
    12b2:	f7 fc       	sbrc	r15, 7
    12b4:	29 c0       	rjmp	.+82     	; 0x1308 <vfprintf+0xfa>
    12b6:	89 2f       	mov	r24, r25
    12b8:	80 53       	subi	r24, 0x30	; 48
    12ba:	8a 30       	cpi	r24, 0x0A	; 10
    12bc:	70 f4       	brcc	.+28     	; 0x12da <vfprintf+0xcc>
    12be:	f6 fe       	sbrs	r15, 6
    12c0:	05 c0       	rjmp	.+10     	; 0x12cc <vfprintf+0xbe>
    12c2:	98 9c       	mul	r9, r8
    12c4:	90 2c       	mov	r9, r0
    12c6:	11 24       	eor	r1, r1
    12c8:	98 0e       	add	r9, r24
    12ca:	15 c0       	rjmp	.+42     	; 0x12f6 <vfprintf+0xe8>
    12cc:	e8 9c       	mul	r14, r8
    12ce:	e0 2c       	mov	r14, r0
    12d0:	11 24       	eor	r1, r1
    12d2:	e8 0e       	add	r14, r24
    12d4:	f0 e2       	ldi	r31, 0x20	; 32
    12d6:	ff 2a       	or	r15, r31
    12d8:	0e c0       	rjmp	.+28     	; 0x12f6 <vfprintf+0xe8>
    12da:	9e 32       	cpi	r25, 0x2E	; 46
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <vfprintf+0xda>
    12de:	f6 fc       	sbrc	r15, 6
    12e0:	6b c1       	rjmp	.+726    	; 0x15b8 <vfprintf+0x3aa>
    12e2:	40 e4       	ldi	r20, 0x40	; 64
    12e4:	f4 2a       	or	r15, r20
    12e6:	07 c0       	rjmp	.+14     	; 0x12f6 <vfprintf+0xe8>
    12e8:	9c 36       	cpi	r25, 0x6C	; 108
    12ea:	19 f4       	brne	.+6      	; 0x12f2 <vfprintf+0xe4>
    12ec:	50 e8       	ldi	r21, 0x80	; 128
    12ee:	f5 2a       	or	r15, r21
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <vfprintf+0xe8>
    12f2:	98 36       	cpi	r25, 0x68	; 104
    12f4:	49 f4       	brne	.+18     	; 0x1308 <vfprintf+0xfa>
    12f6:	f2 01       	movw	r30, r4
    12f8:	23 fd       	sbrc	r18, 3
    12fa:	95 91       	lpm	r25, Z+
    12fc:	23 ff       	sbrs	r18, 3
    12fe:	91 91       	ld	r25, Z+
    1300:	2f 01       	movw	r4, r30
    1302:	99 23       	and	r25, r25
    1304:	09 f0       	breq	.+2      	; 0x1308 <vfprintf+0xfa>
    1306:	b8 cf       	rjmp	.-144    	; 0x1278 <vfprintf+0x6a>
    1308:	89 2f       	mov	r24, r25
    130a:	85 54       	subi	r24, 0x45	; 69
    130c:	83 30       	cpi	r24, 0x03	; 3
    130e:	18 f0       	brcs	.+6      	; 0x1316 <vfprintf+0x108>
    1310:	80 52       	subi	r24, 0x20	; 32
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	38 f4       	brcc	.+14     	; 0x1324 <vfprintf+0x116>
    1316:	44 e0       	ldi	r20, 0x04	; 4
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	a4 0e       	add	r10, r20
    131c:	b5 1e       	adc	r11, r21
    131e:	5f e3       	ldi	r21, 0x3F	; 63
    1320:	59 83       	std	Y+1, r21	; 0x01
    1322:	0f c0       	rjmp	.+30     	; 0x1342 <vfprintf+0x134>
    1324:	93 36       	cpi	r25, 0x63	; 99
    1326:	31 f0       	breq	.+12     	; 0x1334 <vfprintf+0x126>
    1328:	93 37       	cpi	r25, 0x73	; 115
    132a:	79 f0       	breq	.+30     	; 0x134a <vfprintf+0x13c>
    132c:	93 35       	cpi	r25, 0x53	; 83
    132e:	09 f0       	breq	.+2      	; 0x1332 <vfprintf+0x124>
    1330:	56 c0       	rjmp	.+172    	; 0x13de <vfprintf+0x1d0>
    1332:	20 c0       	rjmp	.+64     	; 0x1374 <vfprintf+0x166>
    1334:	f5 01       	movw	r30, r10
    1336:	80 81       	ld	r24, Z
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	42 e0       	ldi	r20, 0x02	; 2
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	a4 0e       	add	r10, r20
    1340:	b5 1e       	adc	r11, r21
    1342:	61 01       	movw	r12, r2
    1344:	01 e0       	ldi	r16, 0x01	; 1
    1346:	10 e0       	ldi	r17, 0x00	; 0
    1348:	12 c0       	rjmp	.+36     	; 0x136e <vfprintf+0x160>
    134a:	f5 01       	movw	r30, r10
    134c:	c0 80       	ld	r12, Z
    134e:	d1 80       	ldd	r13, Z+1	; 0x01
    1350:	f6 fc       	sbrc	r15, 6
    1352:	03 c0       	rjmp	.+6      	; 0x135a <vfprintf+0x14c>
    1354:	6f ef       	ldi	r22, 0xFF	; 255
    1356:	7f ef       	ldi	r23, 0xFF	; 255
    1358:	02 c0       	rjmp	.+4      	; 0x135e <vfprintf+0x150>
    135a:	69 2d       	mov	r22, r9
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	42 e0       	ldi	r20, 0x02	; 2
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	a4 0e       	add	r10, r20
    1364:	b5 1e       	adc	r11, r21
    1366:	c6 01       	movw	r24, r12
    1368:	0e 94 ef 0a 	call	0x15de	; 0x15de <strnlen>
    136c:	8c 01       	movw	r16, r24
    136e:	5f e7       	ldi	r21, 0x7F	; 127
    1370:	f5 22       	and	r15, r21
    1372:	14 c0       	rjmp	.+40     	; 0x139c <vfprintf+0x18e>
    1374:	f5 01       	movw	r30, r10
    1376:	c0 80       	ld	r12, Z
    1378:	d1 80       	ldd	r13, Z+1	; 0x01
    137a:	f6 fc       	sbrc	r15, 6
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <vfprintf+0x176>
    137e:	6f ef       	ldi	r22, 0xFF	; 255
    1380:	7f ef       	ldi	r23, 0xFF	; 255
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <vfprintf+0x17a>
    1384:	69 2d       	mov	r22, r9
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	42 e0       	ldi	r20, 0x02	; 2
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	a4 0e       	add	r10, r20
    138e:	b5 1e       	adc	r11, r21
    1390:	c6 01       	movw	r24, r12
    1392:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <strnlen_P>
    1396:	8c 01       	movw	r16, r24
    1398:	50 e8       	ldi	r21, 0x80	; 128
    139a:	f5 2a       	or	r15, r21
    139c:	f3 fe       	sbrs	r15, 3
    139e:	07 c0       	rjmp	.+14     	; 0x13ae <vfprintf+0x1a0>
    13a0:	1a c0       	rjmp	.+52     	; 0x13d6 <vfprintf+0x1c8>
    13a2:	80 e2       	ldi	r24, 0x20	; 32
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	b3 01       	movw	r22, r6
    13a8:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <fputc>
    13ac:	ea 94       	dec	r14
    13ae:	8e 2d       	mov	r24, r14
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	08 17       	cp	r16, r24
    13b4:	19 07       	cpc	r17, r25
    13b6:	a8 f3       	brcs	.-22     	; 0x13a2 <vfprintf+0x194>
    13b8:	0e c0       	rjmp	.+28     	; 0x13d6 <vfprintf+0x1c8>
    13ba:	f6 01       	movw	r30, r12
    13bc:	f7 fc       	sbrc	r15, 7
    13be:	85 91       	lpm	r24, Z+
    13c0:	f7 fe       	sbrs	r15, 7
    13c2:	81 91       	ld	r24, Z+
    13c4:	6f 01       	movw	r12, r30
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	b3 01       	movw	r22, r6
    13ca:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <fputc>
    13ce:	e1 10       	cpse	r14, r1
    13d0:	ea 94       	dec	r14
    13d2:	01 50       	subi	r16, 0x01	; 1
    13d4:	10 40       	sbci	r17, 0x00	; 0
    13d6:	01 15       	cp	r16, r1
    13d8:	11 05       	cpc	r17, r1
    13da:	79 f7       	brne	.-34     	; 0x13ba <vfprintf+0x1ac>
    13dc:	ea c0       	rjmp	.+468    	; 0x15b2 <vfprintf+0x3a4>
    13de:	94 36       	cpi	r25, 0x64	; 100
    13e0:	11 f0       	breq	.+4      	; 0x13e6 <vfprintf+0x1d8>
    13e2:	99 36       	cpi	r25, 0x69	; 105
    13e4:	69 f5       	brne	.+90     	; 0x1440 <vfprintf+0x232>
    13e6:	f7 fe       	sbrs	r15, 7
    13e8:	08 c0       	rjmp	.+16     	; 0x13fa <vfprintf+0x1ec>
    13ea:	f5 01       	movw	r30, r10
    13ec:	20 81       	ld	r18, Z
    13ee:	31 81       	ldd	r19, Z+1	; 0x01
    13f0:	42 81       	ldd	r20, Z+2	; 0x02
    13f2:	53 81       	ldd	r21, Z+3	; 0x03
    13f4:	84 e0       	ldi	r24, 0x04	; 4
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0a c0       	rjmp	.+20     	; 0x140e <vfprintf+0x200>
    13fa:	f5 01       	movw	r30, r10
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	9c 01       	movw	r18, r24
    1402:	44 27       	eor	r20, r20
    1404:	37 fd       	sbrc	r19, 7
    1406:	40 95       	com	r20
    1408:	54 2f       	mov	r21, r20
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a8 0e       	add	r10, r24
    1410:	b9 1e       	adc	r11, r25
    1412:	9f e6       	ldi	r25, 0x6F	; 111
    1414:	f9 22       	and	r15, r25
    1416:	57 ff       	sbrs	r21, 7
    1418:	09 c0       	rjmp	.+18     	; 0x142c <vfprintf+0x21e>
    141a:	50 95       	com	r21
    141c:	40 95       	com	r20
    141e:	30 95       	com	r19
    1420:	21 95       	neg	r18
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
    1424:	4f 4f       	sbci	r20, 0xFF	; 255
    1426:	5f 4f       	sbci	r21, 0xFF	; 255
    1428:	e0 e8       	ldi	r30, 0x80	; 128
    142a:	fe 2a       	or	r15, r30
    142c:	ca 01       	movw	r24, r20
    142e:	b9 01       	movw	r22, r18
    1430:	a1 01       	movw	r20, r2
    1432:	2a e0       	ldi	r18, 0x0A	; 10
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	0e 94 26 0b 	call	0x164c	; 0x164c <__ultoa_invert>
    143a:	d8 2e       	mov	r13, r24
    143c:	d2 18       	sub	r13, r2
    143e:	40 c0       	rjmp	.+128    	; 0x14c0 <vfprintf+0x2b2>
    1440:	95 37       	cpi	r25, 0x75	; 117
    1442:	29 f4       	brne	.+10     	; 0x144e <vfprintf+0x240>
    1444:	1f 2d       	mov	r17, r15
    1446:	1f 7e       	andi	r17, 0xEF	; 239
    1448:	2a e0       	ldi	r18, 0x0A	; 10
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	1d c0       	rjmp	.+58     	; 0x1488 <vfprintf+0x27a>
    144e:	1f 2d       	mov	r17, r15
    1450:	19 7f       	andi	r17, 0xF9	; 249
    1452:	9f 36       	cpi	r25, 0x6F	; 111
    1454:	61 f0       	breq	.+24     	; 0x146e <vfprintf+0x260>
    1456:	90 37       	cpi	r25, 0x70	; 112
    1458:	20 f4       	brcc	.+8      	; 0x1462 <vfprintf+0x254>
    145a:	98 35       	cpi	r25, 0x58	; 88
    145c:	09 f0       	breq	.+2      	; 0x1460 <vfprintf+0x252>
    145e:	ac c0       	rjmp	.+344    	; 0x15b8 <vfprintf+0x3aa>
    1460:	0f c0       	rjmp	.+30     	; 0x1480 <vfprintf+0x272>
    1462:	90 37       	cpi	r25, 0x70	; 112
    1464:	39 f0       	breq	.+14     	; 0x1474 <vfprintf+0x266>
    1466:	98 37       	cpi	r25, 0x78	; 120
    1468:	09 f0       	breq	.+2      	; 0x146c <vfprintf+0x25e>
    146a:	a6 c0       	rjmp	.+332    	; 0x15b8 <vfprintf+0x3aa>
    146c:	04 c0       	rjmp	.+8      	; 0x1476 <vfprintf+0x268>
    146e:	28 e0       	ldi	r18, 0x08	; 8
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	0a c0       	rjmp	.+20     	; 0x1488 <vfprintf+0x27a>
    1474:	10 61       	ori	r17, 0x10	; 16
    1476:	14 fd       	sbrc	r17, 4
    1478:	14 60       	ori	r17, 0x04	; 4
    147a:	20 e1       	ldi	r18, 0x10	; 16
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	04 c0       	rjmp	.+8      	; 0x1488 <vfprintf+0x27a>
    1480:	14 fd       	sbrc	r17, 4
    1482:	16 60       	ori	r17, 0x06	; 6
    1484:	20 e1       	ldi	r18, 0x10	; 16
    1486:	32 e0       	ldi	r19, 0x02	; 2
    1488:	17 ff       	sbrs	r17, 7
    148a:	08 c0       	rjmp	.+16     	; 0x149c <vfprintf+0x28e>
    148c:	f5 01       	movw	r30, r10
    148e:	60 81       	ld	r22, Z
    1490:	71 81       	ldd	r23, Z+1	; 0x01
    1492:	82 81       	ldd	r24, Z+2	; 0x02
    1494:	93 81       	ldd	r25, Z+3	; 0x03
    1496:	44 e0       	ldi	r20, 0x04	; 4
    1498:	50 e0       	ldi	r21, 0x00	; 0
    149a:	08 c0       	rjmp	.+16     	; 0x14ac <vfprintf+0x29e>
    149c:	f5 01       	movw	r30, r10
    149e:	80 81       	ld	r24, Z
    14a0:	91 81       	ldd	r25, Z+1	; 0x01
    14a2:	bc 01       	movw	r22, r24
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	42 e0       	ldi	r20, 0x02	; 2
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	a4 0e       	add	r10, r20
    14ae:	b5 1e       	adc	r11, r21
    14b0:	a1 01       	movw	r20, r2
    14b2:	0e 94 26 0b 	call	0x164c	; 0x164c <__ultoa_invert>
    14b6:	d8 2e       	mov	r13, r24
    14b8:	d2 18       	sub	r13, r2
    14ba:	8f e7       	ldi	r24, 0x7F	; 127
    14bc:	f8 2e       	mov	r15, r24
    14be:	f1 22       	and	r15, r17
    14c0:	f6 fe       	sbrs	r15, 6
    14c2:	0b c0       	rjmp	.+22     	; 0x14da <vfprintf+0x2cc>
    14c4:	5e ef       	ldi	r21, 0xFE	; 254
    14c6:	f5 22       	and	r15, r21
    14c8:	d9 14       	cp	r13, r9
    14ca:	38 f4       	brcc	.+14     	; 0x14da <vfprintf+0x2cc>
    14cc:	f4 fe       	sbrs	r15, 4
    14ce:	07 c0       	rjmp	.+14     	; 0x14de <vfprintf+0x2d0>
    14d0:	f2 fc       	sbrc	r15, 2
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <vfprintf+0x2d0>
    14d4:	8f ee       	ldi	r24, 0xEF	; 239
    14d6:	f8 22       	and	r15, r24
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <vfprintf+0x2d0>
    14da:	1d 2d       	mov	r17, r13
    14dc:	01 c0       	rjmp	.+2      	; 0x14e0 <vfprintf+0x2d2>
    14de:	19 2d       	mov	r17, r9
    14e0:	f4 fe       	sbrs	r15, 4
    14e2:	0d c0       	rjmp	.+26     	; 0x14fe <vfprintf+0x2f0>
    14e4:	fe 01       	movw	r30, r28
    14e6:	ed 0d       	add	r30, r13
    14e8:	f1 1d       	adc	r31, r1
    14ea:	80 81       	ld	r24, Z
    14ec:	80 33       	cpi	r24, 0x30	; 48
    14ee:	19 f4       	brne	.+6      	; 0x14f6 <vfprintf+0x2e8>
    14f0:	99 ee       	ldi	r25, 0xE9	; 233
    14f2:	f9 22       	and	r15, r25
    14f4:	08 c0       	rjmp	.+16     	; 0x1506 <vfprintf+0x2f8>
    14f6:	1f 5f       	subi	r17, 0xFF	; 255
    14f8:	f2 fe       	sbrs	r15, 2
    14fa:	05 c0       	rjmp	.+10     	; 0x1506 <vfprintf+0x2f8>
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <vfprintf+0x2f6>
    14fe:	8f 2d       	mov	r24, r15
    1500:	86 78       	andi	r24, 0x86	; 134
    1502:	09 f0       	breq	.+2      	; 0x1506 <vfprintf+0x2f8>
    1504:	1f 5f       	subi	r17, 0xFF	; 255
    1506:	0f 2d       	mov	r16, r15
    1508:	f3 fc       	sbrc	r15, 3
    150a:	14 c0       	rjmp	.+40     	; 0x1534 <vfprintf+0x326>
    150c:	f0 fe       	sbrs	r15, 0
    150e:	0f c0       	rjmp	.+30     	; 0x152e <vfprintf+0x320>
    1510:	1e 15       	cp	r17, r14
    1512:	10 f0       	brcs	.+4      	; 0x1518 <vfprintf+0x30a>
    1514:	9d 2c       	mov	r9, r13
    1516:	0b c0       	rjmp	.+22     	; 0x152e <vfprintf+0x320>
    1518:	9d 2c       	mov	r9, r13
    151a:	9e 0c       	add	r9, r14
    151c:	91 1a       	sub	r9, r17
    151e:	1e 2d       	mov	r17, r14
    1520:	06 c0       	rjmp	.+12     	; 0x152e <vfprintf+0x320>
    1522:	80 e2       	ldi	r24, 0x20	; 32
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	b3 01       	movw	r22, r6
    1528:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <fputc>
    152c:	1f 5f       	subi	r17, 0xFF	; 255
    152e:	1e 15       	cp	r17, r14
    1530:	c0 f3       	brcs	.-16     	; 0x1522 <vfprintf+0x314>
    1532:	04 c0       	rjmp	.+8      	; 0x153c <vfprintf+0x32e>
    1534:	1e 15       	cp	r17, r14
    1536:	10 f4       	brcc	.+4      	; 0x153c <vfprintf+0x32e>
    1538:	e1 1a       	sub	r14, r17
    153a:	01 c0       	rjmp	.+2      	; 0x153e <vfprintf+0x330>
    153c:	ee 24       	eor	r14, r14
    153e:	04 ff       	sbrs	r16, 4
    1540:	0f c0       	rjmp	.+30     	; 0x1560 <vfprintf+0x352>
    1542:	80 e3       	ldi	r24, 0x30	; 48
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	b3 01       	movw	r22, r6
    1548:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <fputc>
    154c:	02 ff       	sbrs	r16, 2
    154e:	1d c0       	rjmp	.+58     	; 0x158a <vfprintf+0x37c>
    1550:	01 fd       	sbrc	r16, 1
    1552:	03 c0       	rjmp	.+6      	; 0x155a <vfprintf+0x34c>
    1554:	88 e7       	ldi	r24, 0x78	; 120
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e c0       	rjmp	.+28     	; 0x1576 <vfprintf+0x368>
    155a:	88 e5       	ldi	r24, 0x58	; 88
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0b c0       	rjmp	.+22     	; 0x1576 <vfprintf+0x368>
    1560:	80 2f       	mov	r24, r16
    1562:	86 78       	andi	r24, 0x86	; 134
    1564:	91 f0       	breq	.+36     	; 0x158a <vfprintf+0x37c>
    1566:	01 ff       	sbrs	r16, 1
    1568:	02 c0       	rjmp	.+4      	; 0x156e <vfprintf+0x360>
    156a:	8b e2       	ldi	r24, 0x2B	; 43
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <vfprintf+0x362>
    156e:	80 e2       	ldi	r24, 0x20	; 32
    1570:	f7 fc       	sbrc	r15, 7
    1572:	8d e2       	ldi	r24, 0x2D	; 45
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	b3 01       	movw	r22, r6
    1578:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <fputc>
    157c:	06 c0       	rjmp	.+12     	; 0x158a <vfprintf+0x37c>
    157e:	80 e3       	ldi	r24, 0x30	; 48
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	b3 01       	movw	r22, r6
    1584:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <fputc>
    1588:	9a 94       	dec	r9
    158a:	d9 14       	cp	r13, r9
    158c:	c0 f3       	brcs	.-16     	; 0x157e <vfprintf+0x370>
    158e:	da 94       	dec	r13
    1590:	f1 01       	movw	r30, r2
    1592:	ed 0d       	add	r30, r13
    1594:	f1 1d       	adc	r31, r1
    1596:	80 81       	ld	r24, Z
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	b3 01       	movw	r22, r6
    159c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <fputc>
    15a0:	dd 20       	and	r13, r13
    15a2:	a9 f7       	brne	.-22     	; 0x158e <vfprintf+0x380>
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <vfprintf+0x3a4>
    15a6:	80 e2       	ldi	r24, 0x20	; 32
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	b3 01       	movw	r22, r6
    15ac:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <fputc>
    15b0:	ea 94       	dec	r14
    15b2:	ee 20       	and	r14, r14
    15b4:	c1 f7       	brne	.-16     	; 0x15a6 <vfprintf+0x398>
    15b6:	43 ce       	rjmp	.-890    	; 0x123e <vfprintf+0x30>
    15b8:	f3 01       	movw	r30, r6
    15ba:	66 81       	ldd	r22, Z+6	; 0x06
    15bc:	77 81       	ldd	r23, Z+7	; 0x07
    15be:	cb 01       	movw	r24, r22
    15c0:	2b 96       	adiw	r28, 0x0b	; 11
    15c2:	e2 e1       	ldi	r30, 0x12	; 18
    15c4:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__epilogue_restores__>

000015c8 <strnlen_P>:
    15c8:	fc 01       	movw	r30, r24
    15ca:	05 90       	lpm	r0, Z+
    15cc:	61 50       	subi	r22, 0x01	; 1
    15ce:	70 40       	sbci	r23, 0x00	; 0
    15d0:	01 10       	cpse	r0, r1
    15d2:	d8 f7       	brcc	.-10     	; 0x15ca <strnlen_P+0x2>
    15d4:	80 95       	com	r24
    15d6:	90 95       	com	r25
    15d8:	8e 0f       	add	r24, r30
    15da:	9f 1f       	adc	r25, r31
    15dc:	08 95       	ret

000015de <strnlen>:
    15de:	fc 01       	movw	r30, r24
    15e0:	61 50       	subi	r22, 0x01	; 1
    15e2:	70 40       	sbci	r23, 0x00	; 0
    15e4:	01 90       	ld	r0, Z+
    15e6:	01 10       	cpse	r0, r1
    15e8:	d8 f7       	brcc	.-10     	; 0x15e0 <strnlen+0x2>
    15ea:	80 95       	com	r24
    15ec:	90 95       	com	r25
    15ee:	8e 0f       	add	r24, r30
    15f0:	9f 1f       	adc	r25, r31
    15f2:	08 95       	ret

000015f4 <fputc>:
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	8c 01       	movw	r16, r24
    15fe:	eb 01       	movw	r28, r22
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	81 ff       	sbrs	r24, 1
    1604:	1b c0       	rjmp	.+54     	; 0x163c <fputc+0x48>
    1606:	82 ff       	sbrs	r24, 2
    1608:	0d c0       	rjmp	.+26     	; 0x1624 <fputc+0x30>
    160a:	2e 81       	ldd	r18, Y+6	; 0x06
    160c:	3f 81       	ldd	r19, Y+7	; 0x07
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	9d 81       	ldd	r25, Y+5	; 0x05
    1612:	28 17       	cp	r18, r24
    1614:	39 07       	cpc	r19, r25
    1616:	64 f4       	brge	.+24     	; 0x1630 <fputc+0x3c>
    1618:	e8 81       	ld	r30, Y
    161a:	f9 81       	ldd	r31, Y+1	; 0x01
    161c:	01 93       	st	Z+, r16
    161e:	f9 83       	std	Y+1, r31	; 0x01
    1620:	e8 83       	st	Y, r30
    1622:	06 c0       	rjmp	.+12     	; 0x1630 <fputc+0x3c>
    1624:	e8 85       	ldd	r30, Y+8	; 0x08
    1626:	f9 85       	ldd	r31, Y+9	; 0x09
    1628:	80 2f       	mov	r24, r16
    162a:	09 95       	icall
    162c:	89 2b       	or	r24, r25
    162e:	31 f4       	brne	.+12     	; 0x163c <fputc+0x48>
    1630:	8e 81       	ldd	r24, Y+6	; 0x06
    1632:	9f 81       	ldd	r25, Y+7	; 0x07
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	9f 83       	std	Y+7, r25	; 0x07
    1638:	8e 83       	std	Y+6, r24	; 0x06
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <fputc+0x4c>
    163c:	0f ef       	ldi	r16, 0xFF	; 255
    163e:	1f ef       	ldi	r17, 0xFF	; 255
    1640:	c8 01       	movw	r24, r16
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	08 95       	ret

0000164c <__ultoa_invert>:
    164c:	fa 01       	movw	r30, r20
    164e:	aa 27       	eor	r26, r26
    1650:	28 30       	cpi	r18, 0x08	; 8
    1652:	51 f1       	breq	.+84     	; 0x16a8 <__ultoa_invert+0x5c>
    1654:	20 31       	cpi	r18, 0x10	; 16
    1656:	81 f1       	breq	.+96     	; 0x16b8 <__ultoa_invert+0x6c>
    1658:	e8 94       	clt
    165a:	6f 93       	push	r22
    165c:	6e 7f       	andi	r22, 0xFE	; 254
    165e:	6e 5f       	subi	r22, 0xFE	; 254
    1660:	7f 4f       	sbci	r23, 0xFF	; 255
    1662:	8f 4f       	sbci	r24, 0xFF	; 255
    1664:	9f 4f       	sbci	r25, 0xFF	; 255
    1666:	af 4f       	sbci	r26, 0xFF	; 255
    1668:	b1 e0       	ldi	r27, 0x01	; 1
    166a:	3e d0       	rcall	.+124    	; 0x16e8 <__ultoa_invert+0x9c>
    166c:	b4 e0       	ldi	r27, 0x04	; 4
    166e:	3c d0       	rcall	.+120    	; 0x16e8 <__ultoa_invert+0x9c>
    1670:	67 0f       	add	r22, r23
    1672:	78 1f       	adc	r23, r24
    1674:	89 1f       	adc	r24, r25
    1676:	9a 1f       	adc	r25, r26
    1678:	a1 1d       	adc	r26, r1
    167a:	68 0f       	add	r22, r24
    167c:	79 1f       	adc	r23, r25
    167e:	8a 1f       	adc	r24, r26
    1680:	91 1d       	adc	r25, r1
    1682:	a1 1d       	adc	r26, r1
    1684:	6a 0f       	add	r22, r26
    1686:	71 1d       	adc	r23, r1
    1688:	81 1d       	adc	r24, r1
    168a:	91 1d       	adc	r25, r1
    168c:	a1 1d       	adc	r26, r1
    168e:	20 d0       	rcall	.+64     	; 0x16d0 <__ultoa_invert+0x84>
    1690:	09 f4       	brne	.+2      	; 0x1694 <__ultoa_invert+0x48>
    1692:	68 94       	set
    1694:	3f 91       	pop	r19
    1696:	2a e0       	ldi	r18, 0x0A	; 10
    1698:	26 9f       	mul	r18, r22
    169a:	11 24       	eor	r1, r1
    169c:	30 19       	sub	r19, r0
    169e:	30 5d       	subi	r19, 0xD0	; 208
    16a0:	31 93       	st	Z+, r19
    16a2:	de f6       	brtc	.-74     	; 0x165a <__ultoa_invert+0xe>
    16a4:	cf 01       	movw	r24, r30
    16a6:	08 95       	ret
    16a8:	46 2f       	mov	r20, r22
    16aa:	47 70       	andi	r20, 0x07	; 7
    16ac:	40 5d       	subi	r20, 0xD0	; 208
    16ae:	41 93       	st	Z+, r20
    16b0:	b3 e0       	ldi	r27, 0x03	; 3
    16b2:	0f d0       	rcall	.+30     	; 0x16d2 <__ultoa_invert+0x86>
    16b4:	c9 f7       	brne	.-14     	; 0x16a8 <__ultoa_invert+0x5c>
    16b6:	f6 cf       	rjmp	.-20     	; 0x16a4 <__ultoa_invert+0x58>
    16b8:	46 2f       	mov	r20, r22
    16ba:	4f 70       	andi	r20, 0x0F	; 15
    16bc:	40 5d       	subi	r20, 0xD0	; 208
    16be:	4a 33       	cpi	r20, 0x3A	; 58
    16c0:	18 f0       	brcs	.+6      	; 0x16c8 <__ultoa_invert+0x7c>
    16c2:	49 5d       	subi	r20, 0xD9	; 217
    16c4:	31 fd       	sbrc	r19, 1
    16c6:	40 52       	subi	r20, 0x20	; 32
    16c8:	41 93       	st	Z+, r20
    16ca:	02 d0       	rcall	.+4      	; 0x16d0 <__ultoa_invert+0x84>
    16cc:	a9 f7       	brne	.-22     	; 0x16b8 <__ultoa_invert+0x6c>
    16ce:	ea cf       	rjmp	.-44     	; 0x16a4 <__ultoa_invert+0x58>
    16d0:	b4 e0       	ldi	r27, 0x04	; 4
    16d2:	a6 95       	lsr	r26
    16d4:	97 95       	ror	r25
    16d6:	87 95       	ror	r24
    16d8:	77 95       	ror	r23
    16da:	67 95       	ror	r22
    16dc:	ba 95       	dec	r27
    16de:	c9 f7       	brne	.-14     	; 0x16d2 <__ultoa_invert+0x86>
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	61 05       	cpc	r22, r1
    16e4:	71 05       	cpc	r23, r1
    16e6:	08 95       	ret
    16e8:	9b 01       	movw	r18, r22
    16ea:	ac 01       	movw	r20, r24
    16ec:	0a 2e       	mov	r0, r26
    16ee:	06 94       	lsr	r0
    16f0:	57 95       	ror	r21
    16f2:	47 95       	ror	r20
    16f4:	37 95       	ror	r19
    16f6:	27 95       	ror	r18
    16f8:	ba 95       	dec	r27
    16fa:	c9 f7       	brne	.-14     	; 0x16ee <__ultoa_invert+0xa2>
    16fc:	62 0f       	add	r22, r18
    16fe:	73 1f       	adc	r23, r19
    1700:	84 1f       	adc	r24, r20
    1702:	95 1f       	adc	r25, r21
    1704:	a0 1d       	adc	r26, r0
    1706:	08 95       	ret

00001708 <__fp_inf>:
    1708:	97 f9       	bld	r25, 7
    170a:	9f 67       	ori	r25, 0x7F	; 127
    170c:	80 e8       	ldi	r24, 0x80	; 128
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	08 95       	ret

00001714 <__fp_nan>:
    1714:	9f ef       	ldi	r25, 0xFF	; 255
    1716:	80 ec       	ldi	r24, 0xC0	; 192
    1718:	08 95       	ret

0000171a <__fp_pscA>:
    171a:	00 24       	eor	r0, r0
    171c:	0a 94       	dec	r0
    171e:	16 16       	cp	r1, r22
    1720:	17 06       	cpc	r1, r23
    1722:	18 06       	cpc	r1, r24
    1724:	09 06       	cpc	r0, r25
    1726:	08 95       	ret

00001728 <__fp_pscB>:
    1728:	00 24       	eor	r0, r0
    172a:	0a 94       	dec	r0
    172c:	12 16       	cp	r1, r18
    172e:	13 06       	cpc	r1, r19
    1730:	14 06       	cpc	r1, r20
    1732:	05 06       	cpc	r0, r21
    1734:	08 95       	ret

00001736 <__fp_round>:
    1736:	09 2e       	mov	r0, r25
    1738:	03 94       	inc	r0
    173a:	00 0c       	add	r0, r0
    173c:	11 f4       	brne	.+4      	; 0x1742 <__fp_round+0xc>
    173e:	88 23       	and	r24, r24
    1740:	52 f0       	brmi	.+20     	; 0x1756 <__fp_round+0x20>
    1742:	bb 0f       	add	r27, r27
    1744:	40 f4       	brcc	.+16     	; 0x1756 <__fp_round+0x20>
    1746:	bf 2b       	or	r27, r31
    1748:	11 f4       	brne	.+4      	; 0x174e <__fp_round+0x18>
    174a:	60 ff       	sbrs	r22, 0
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <__fp_round+0x20>
    174e:	6f 5f       	subi	r22, 0xFF	; 255
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	8f 4f       	sbci	r24, 0xFF	; 255
    1754:	9f 4f       	sbci	r25, 0xFF	; 255
    1756:	08 95       	ret

00001758 <__divmodhi4>:
    1758:	97 fb       	bst	r25, 7
    175a:	09 2e       	mov	r0, r25
    175c:	07 26       	eor	r0, r23
    175e:	0a d0       	rcall	.+20     	; 0x1774 <__divmodhi4_neg1>
    1760:	77 fd       	sbrc	r23, 7
    1762:	04 d0       	rcall	.+8      	; 0x176c <__divmodhi4_neg2>
    1764:	43 d0       	rcall	.+134    	; 0x17ec <__udivmodhi4>
    1766:	06 d0       	rcall	.+12     	; 0x1774 <__divmodhi4_neg1>
    1768:	00 20       	and	r0, r0
    176a:	1a f4       	brpl	.+6      	; 0x1772 <__divmodhi4_exit>

0000176c <__divmodhi4_neg2>:
    176c:	70 95       	com	r23
    176e:	61 95       	neg	r22
    1770:	7f 4f       	sbci	r23, 0xFF	; 255

00001772 <__divmodhi4_exit>:
    1772:	08 95       	ret

00001774 <__divmodhi4_neg1>:
    1774:	f6 f7       	brtc	.-4      	; 0x1772 <__divmodhi4_exit>
    1776:	90 95       	com	r25
    1778:	81 95       	neg	r24
    177a:	9f 4f       	sbci	r25, 0xFF	; 255
    177c:	08 95       	ret

0000177e <__prologue_saves__>:
    177e:	2f 92       	push	r2
    1780:	3f 92       	push	r3
    1782:	4f 92       	push	r4
    1784:	5f 92       	push	r5
    1786:	6f 92       	push	r6
    1788:	7f 92       	push	r7
    178a:	8f 92       	push	r8
    178c:	9f 92       	push	r9
    178e:	af 92       	push	r10
    1790:	bf 92       	push	r11
    1792:	cf 92       	push	r12
    1794:	df 92       	push	r13
    1796:	ef 92       	push	r14
    1798:	ff 92       	push	r15
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	ca 1b       	sub	r28, r26
    17a8:	db 0b       	sbc	r29, r27
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	09 94       	ijmp

000017b6 <__epilogue_restores__>:
    17b6:	2a 88       	ldd	r2, Y+18	; 0x12
    17b8:	39 88       	ldd	r3, Y+17	; 0x11
    17ba:	48 88       	ldd	r4, Y+16	; 0x10
    17bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    17be:	6e 84       	ldd	r6, Y+14	; 0x0e
    17c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    17c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    17c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    17c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    17c8:	b9 84       	ldd	r11, Y+9	; 0x09
    17ca:	c8 84       	ldd	r12, Y+8	; 0x08
    17cc:	df 80       	ldd	r13, Y+7	; 0x07
    17ce:	ee 80       	ldd	r14, Y+6	; 0x06
    17d0:	fd 80       	ldd	r15, Y+5	; 0x05
    17d2:	0c 81       	ldd	r16, Y+4	; 0x04
    17d4:	1b 81       	ldd	r17, Y+3	; 0x03
    17d6:	aa 81       	ldd	r26, Y+2	; 0x02
    17d8:	b9 81       	ldd	r27, Y+1	; 0x01
    17da:	ce 0f       	add	r28, r30
    17dc:	d1 1d       	adc	r29, r1
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	ed 01       	movw	r28, r26
    17ea:	08 95       	ret

000017ec <__udivmodhi4>:
    17ec:	aa 1b       	sub	r26, r26
    17ee:	bb 1b       	sub	r27, r27
    17f0:	51 e1       	ldi	r21, 0x11	; 17
    17f2:	07 c0       	rjmp	.+14     	; 0x1802 <__udivmodhi4_ep>

000017f4 <__udivmodhi4_loop>:
    17f4:	aa 1f       	adc	r26, r26
    17f6:	bb 1f       	adc	r27, r27
    17f8:	a6 17       	cp	r26, r22
    17fa:	b7 07       	cpc	r27, r23
    17fc:	10 f0       	brcs	.+4      	; 0x1802 <__udivmodhi4_ep>
    17fe:	a6 1b       	sub	r26, r22
    1800:	b7 0b       	sbc	r27, r23

00001802 <__udivmodhi4_ep>:
    1802:	88 1f       	adc	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	5a 95       	dec	r21
    1808:	a9 f7       	brne	.-22     	; 0x17f4 <__udivmodhi4_loop>
    180a:	80 95       	com	r24
    180c:	90 95       	com	r25
    180e:	bc 01       	movw	r22, r24
    1810:	cd 01       	movw	r24, r26
    1812:	08 95       	ret

00001814 <_exit>:
    1814:	f8 94       	cli

00001816 <__stop_program>:
    1816:	ff cf       	rjmp	.-2      	; 0x1816 <__stop_program>
